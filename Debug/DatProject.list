
DatProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001610  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080017b8  080017b8  000117b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017d4  080017d4  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080017d4  080017d4  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017d4  080017d4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017d4  080017d4  000117d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017d8  080017d8  000117d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080017dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000034  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000004c  2000004c  00020018  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001818  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004f8  00000000  00000000  0002185a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000188  00000000  00000000  00021d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000150  00000000  00000000  00021ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000025d2  00000000  00000000  00022030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000017eb  00000000  00000000  00024602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009c8d  00000000  00000000  00025ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002fa7a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006d8  00000000  00000000  0002facc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000018 	.word	0x20000018
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080017a0 	.word	0x080017a0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000001c 	.word	0x2000001c
 80001e4:	080017a0 	.word	0x080017a0

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__aeabi_d2uiz>:
 8000984:	004a      	lsls	r2, r1, #1
 8000986:	d211      	bcs.n	80009ac <__aeabi_d2uiz+0x28>
 8000988:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800098c:	d211      	bcs.n	80009b2 <__aeabi_d2uiz+0x2e>
 800098e:	d50d      	bpl.n	80009ac <__aeabi_d2uiz+0x28>
 8000990:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000994:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000998:	d40e      	bmi.n	80009b8 <__aeabi_d2uiz+0x34>
 800099a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009a6:	fa23 f002 	lsr.w	r0, r3, r2
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b6:	d102      	bne.n	80009be <__aeabi_d2uiz+0x3a>
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	4770      	bx	lr
 80009be:	f04f 0000 	mov.w	r0, #0
 80009c2:	4770      	bx	lr

080009c4 <GPIO_Init>:
 *
 * @Note            - None
 *
*/
void GPIO_Init(GPIO_Handle_t *pGPIO)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
    uint32_t tempReg;
    /* config the mode of the pin */
    /*enable clock for GPIOx*/
    GPIO_PeriClockControl(pGPIO->pGPIOx,ENABLE);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2101      	movs	r1, #1
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f98c 	bl	8000cf0 <GPIO_PeriClockControl>
    if(pGPIO->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	795b      	ldrb	r3, [r3, #5]
 80009dc:	2b03      	cmp	r3, #3
 80009de:	d81a      	bhi.n	8000a16 <GPIO_Init+0x52>
    {
        tempReg = pGPIO->pGPIOx->MODER & ~(3 << pGPIO->GPIO_PinConfig.GPIO_PinNumber * 2);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	7912      	ldrb	r2, [r2, #4]
 80009ea:	0052      	lsls	r2, r2, #1
 80009ec:	2103      	movs	r1, #3
 80009ee:	fa01 f202 	lsl.w	r2, r1, r2
 80009f2:	43d2      	mvns	r2, r2
 80009f4:	4013      	ands	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        pGPIO->pGPIOx->MODER = tempReg | (pGPIO->GPIO_PinConfig.GPIO_PinMode << pGPIO->GPIO_PinConfig.GPIO_PinNumber * 2);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	795b      	ldrb	r3, [r3, #5]
 80009fc:	461a      	mov	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	791b      	ldrb	r3, [r3, #4]
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	4619      	mov	r1, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	430a      	orrs	r2, r1
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	e0b6      	b.n	8000b84 <GPIO_Init+0x1c0>
    else
    {
    	/*Init clock for EXTI and SYSCFG peripherals*/
    	//EXTI_CLK_ENB();
        /* Configuration of EXTI peripheral */
        if(pGPIO->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	795b      	ldrb	r3, [r3, #5]
 8000a1a:	2b04      	cmp	r3, #4
 8000a1c:	d117      	bne.n	8000a4e <GPIO_Init+0x8a>
        {
            /* config the FTRS register */
            EXTI->FTSR |= (1 << pGPIO->GPIO_PinConfig.GPIO_PinNumber);
 8000a1e:	4b97      	ldr	r3, [pc, #604]	; (8000c7c <GPIO_Init+0x2b8>)
 8000a20:	68db      	ldr	r3, [r3, #12]
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	7912      	ldrb	r2, [r2, #4]
 8000a26:	4611      	mov	r1, r2
 8000a28:	2201      	movs	r2, #1
 8000a2a:	408a      	lsls	r2, r1
 8000a2c:	4611      	mov	r1, r2
 8000a2e:	4a93      	ldr	r2, [pc, #588]	; (8000c7c <GPIO_Init+0x2b8>)
 8000a30:	430b      	orrs	r3, r1
 8000a32:	60d3      	str	r3, [r2, #12]
            EXTI->RTSR &= ~(1 << pGPIO->GPIO_PinConfig.GPIO_PinNumber);
 8000a34:	4b91      	ldr	r3, [pc, #580]	; (8000c7c <GPIO_Init+0x2b8>)
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	7912      	ldrb	r2, [r2, #4]
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	2201      	movs	r2, #1
 8000a40:	408a      	lsls	r2, r1
 8000a42:	43d2      	mvns	r2, r2
 8000a44:	4611      	mov	r1, r2
 8000a46:	4a8d      	ldr	r2, [pc, #564]	; (8000c7c <GPIO_Init+0x2b8>)
 8000a48:	400b      	ands	r3, r1
 8000a4a:	6093      	str	r3, [r2, #8]
 8000a4c:	e035      	b.n	8000aba <GPIO_Init+0xf6>

        }
        else if(pGPIO->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	795b      	ldrb	r3, [r3, #5]
 8000a52:	2b05      	cmp	r3, #5
 8000a54:	d117      	bne.n	8000a86 <GPIO_Init+0xc2>
        {
            /* config the RTRS register */
            EXTI->RTSR |= (1 << pGPIO->GPIO_PinConfig.GPIO_PinNumber);
 8000a56:	4b89      	ldr	r3, [pc, #548]	; (8000c7c <GPIO_Init+0x2b8>)
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	7912      	ldrb	r2, [r2, #4]
 8000a5e:	4611      	mov	r1, r2
 8000a60:	2201      	movs	r2, #1
 8000a62:	408a      	lsls	r2, r1
 8000a64:	4611      	mov	r1, r2
 8000a66:	4a85      	ldr	r2, [pc, #532]	; (8000c7c <GPIO_Init+0x2b8>)
 8000a68:	430b      	orrs	r3, r1
 8000a6a:	6093      	str	r3, [r2, #8]
            EXTI->FTSR &= ~(1 << pGPIO->GPIO_PinConfig.GPIO_PinNumber);
 8000a6c:	4b83      	ldr	r3, [pc, #524]	; (8000c7c <GPIO_Init+0x2b8>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	7912      	ldrb	r2, [r2, #4]
 8000a74:	4611      	mov	r1, r2
 8000a76:	2201      	movs	r2, #1
 8000a78:	408a      	lsls	r2, r1
 8000a7a:	43d2      	mvns	r2, r2
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4a7f      	ldr	r2, [pc, #508]	; (8000c7c <GPIO_Init+0x2b8>)
 8000a80:	400b      	ands	r3, r1
 8000a82:	60d3      	str	r3, [r2, #12]
 8000a84:	e019      	b.n	8000aba <GPIO_Init+0xf6>
        }
        else if (pGPIO->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	795b      	ldrb	r3, [r3, #5]
 8000a8a:	2b06      	cmp	r3, #6
 8000a8c:	d115      	bne.n	8000aba <GPIO_Init+0xf6>
        {
            /* config both RTRS and FRRS */
            EXTI->FTSR |= (1 << pGPIO->GPIO_PinConfig.GPIO_PinNumber);
 8000a8e:	4b7b      	ldr	r3, [pc, #492]	; (8000c7c <GPIO_Init+0x2b8>)
 8000a90:	68db      	ldr	r3, [r3, #12]
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	7912      	ldrb	r2, [r2, #4]
 8000a96:	4611      	mov	r1, r2
 8000a98:	2201      	movs	r2, #1
 8000a9a:	408a      	lsls	r2, r1
 8000a9c:	4611      	mov	r1, r2
 8000a9e:	4a77      	ldr	r2, [pc, #476]	; (8000c7c <GPIO_Init+0x2b8>)
 8000aa0:	430b      	orrs	r3, r1
 8000aa2:	60d3      	str	r3, [r2, #12]
            EXTI->RTSR |= (1 << pGPIO->GPIO_PinConfig.GPIO_PinNumber);
 8000aa4:	4b75      	ldr	r3, [pc, #468]	; (8000c7c <GPIO_Init+0x2b8>)
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	7912      	ldrb	r2, [r2, #4]
 8000aac:	4611      	mov	r1, r2
 8000aae:	2201      	movs	r2, #1
 8000ab0:	408a      	lsls	r2, r1
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4a71      	ldr	r2, [pc, #452]	; (8000c7c <GPIO_Init+0x2b8>)
 8000ab6:	430b      	orrs	r3, r1
 8000ab8:	6093      	str	r3, [r2, #8]
        }

        /* config interupt mask register from EXTI side
         * this register allows interupt to be deliveried to NVIC controller */
        EXTI->IMR |= (1 << pGPIO->GPIO_PinConfig.GPIO_PinNumber);
 8000aba:	4b70      	ldr	r3, [pc, #448]	; (8000c7c <GPIO_Init+0x2b8>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	7912      	ldrb	r2, [r2, #4]
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	408a      	lsls	r2, r1
 8000ac8:	4611      	mov	r1, r2
 8000aca:	4a6c      	ldr	r2, [pc, #432]	; (8000c7c <GPIO_Init+0x2b8>)
 8000acc:	430b      	orrs	r3, r1
 8000ace:	6013      	str	r3, [r2, #0]


        /* Configuration of SYSFG peripherals */

        /* config GPIO port selection in SYSCFG_EXTICR */
        uint8_t temp1 = pGPIO->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	791b      	ldrb	r3, [r3, #4]
 8000ad4:	089b      	lsrs	r3, r3, #2
 8000ad6:	75fb      	strb	r3, [r7, #23]
        		uint8_t temp2 = pGPIO->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	791b      	ldrb	r3, [r3, #4]
 8000adc:	f003 0303 	and.w	r3, r3, #3
 8000ae0:	75bb      	strb	r3, [r7, #22]
        		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIO->pGPIOx);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a66      	ldr	r2, [pc, #408]	; (8000c80 <GPIO_Init+0x2bc>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d039      	beq.n	8000b60 <GPIO_Init+0x19c>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a64      	ldr	r2, [pc, #400]	; (8000c84 <GPIO_Init+0x2c0>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d032      	beq.n	8000b5c <GPIO_Init+0x198>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a63      	ldr	r2, [pc, #396]	; (8000c88 <GPIO_Init+0x2c4>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d02b      	beq.n	8000b58 <GPIO_Init+0x194>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a61      	ldr	r2, [pc, #388]	; (8000c8c <GPIO_Init+0x2c8>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d024      	beq.n	8000b54 <GPIO_Init+0x190>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a60      	ldr	r2, [pc, #384]	; (8000c90 <GPIO_Init+0x2cc>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d01d      	beq.n	8000b50 <GPIO_Init+0x18c>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a5e      	ldr	r2, [pc, #376]	; (8000c94 <GPIO_Init+0x2d0>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d016      	beq.n	8000b4c <GPIO_Init+0x188>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a5d      	ldr	r2, [pc, #372]	; (8000c98 <GPIO_Init+0x2d4>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d00f      	beq.n	8000b48 <GPIO_Init+0x184>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a5b      	ldr	r2, [pc, #364]	; (8000c9c <GPIO_Init+0x2d8>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d008      	beq.n	8000b44 <GPIO_Init+0x180>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a5a      	ldr	r2, [pc, #360]	; (8000ca0 <GPIO_Init+0x2dc>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d101      	bne.n	8000b40 <GPIO_Init+0x17c>
 8000b3c:	2308      	movs	r3, #8
 8000b3e:	e010      	b.n	8000b62 <GPIO_Init+0x19e>
 8000b40:	2300      	movs	r3, #0
 8000b42:	e00e      	b.n	8000b62 <GPIO_Init+0x19e>
 8000b44:	2307      	movs	r3, #7
 8000b46:	e00c      	b.n	8000b62 <GPIO_Init+0x19e>
 8000b48:	2306      	movs	r3, #6
 8000b4a:	e00a      	b.n	8000b62 <GPIO_Init+0x19e>
 8000b4c:	2305      	movs	r3, #5
 8000b4e:	e008      	b.n	8000b62 <GPIO_Init+0x19e>
 8000b50:	2304      	movs	r3, #4
 8000b52:	e006      	b.n	8000b62 <GPIO_Init+0x19e>
 8000b54:	2303      	movs	r3, #3
 8000b56:	e004      	b.n	8000b62 <GPIO_Init+0x19e>
 8000b58:	2302      	movs	r3, #2
 8000b5a:	e002      	b.n	8000b62 <GPIO_Init+0x19e>
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e000      	b.n	8000b62 <GPIO_Init+0x19e>
 8000b60:	2300      	movs	r3, #0
 8000b62:	757b      	strb	r3, [r7, #21]
        		SYSCFG_PCLK_EN();
 8000b64:	4b4f      	ldr	r3, [pc, #316]	; (8000ca4 <GPIO_Init+0x2e0>)
 8000b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b68:	4a4e      	ldr	r2, [pc, #312]	; (8000ca4 <GPIO_Init+0x2e0>)
 8000b6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6e:	6453      	str	r3, [r2, #68]	; 0x44
        		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000b70:	7d7a      	ldrb	r2, [r7, #21]
 8000b72:	7dbb      	ldrb	r3, [r7, #22]
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	fa02 f103 	lsl.w	r1, r2, r3
 8000b7a:	4a4b      	ldr	r2, [pc, #300]	; (8000ca8 <GPIO_Init+0x2e4>)
 8000b7c:	7dfb      	ldrb	r3, [r7, #23]
 8000b7e:	3302      	adds	r3, #2
 8000b80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        /* End of configuration of SYSFG peripherals */
    }
    /* config speed */
    tempReg = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	613b      	str	r3, [r7, #16]
    tempReg = pGPIO->pGPIOx->OSPEEDR & ~(0x3 << pGPIO->GPIO_PinConfig.GPIO_PinNumber * 2); /* 2 bits need to be deleted */
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	7912      	ldrb	r2, [r2, #4]
 8000b92:	0052      	lsls	r2, r2, #1
 8000b94:	2103      	movs	r1, #3
 8000b96:	fa01 f202 	lsl.w	r2, r1, r2
 8000b9a:	43d2      	mvns	r2, r2
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
    pGPIO->pGPIOx->OSPEEDR = tempReg | (pGPIO->GPIO_PinConfig.GPIO_PinSpeed << pGPIO->GPIO_PinConfig.GPIO_PinNumber * 2);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	799b      	ldrb	r3, [r3, #6]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	791b      	ldrb	r3, [r3, #4]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	609a      	str	r2, [r3, #8]
    /* config pupd  */
    tempReg = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]
    tempReg = pGPIO->pGPIOx->PUPDR & ~(0x3 << pGPIO->GPIO_PinConfig.GPIO_PinNumber * 2); /* 2 bits need to be deleted */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	7912      	ldrb	r2, [r2, #4]
 8000bca:	0052      	lsls	r2, r2, #1
 8000bcc:	2103      	movs	r1, #3
 8000bce:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd2:	43d2      	mvns	r2, r2
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
    pGPIO->pGPIOx->PUPDR = tempReg | (pGPIO->GPIO_PinConfig.GPIO_PinPuPdControl << pGPIO->GPIO_PinConfig.GPIO_PinNumber * 2);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	79db      	ldrb	r3, [r3, #7]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	791b      	ldrb	r3, [r3, #4]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	4619      	mov	r1, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	60da      	str	r2, [r3, #12]

    /*OUTPUT type*/
    if(pGPIO->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	795b      	ldrb	r3, [r3, #5]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d119      	bne.n	8000c30 <GPIO_Init+0x26c>
    {
		tempReg = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	613b      	str	r3, [r7, #16]
		tempReg = pGPIO->pGPIOx->OTYPER & ~(0x1 << pGPIO->GPIO_PinConfig.GPIO_PinNumber); /* 1 bit need to be deleted */
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	7912      	ldrb	r2, [r2, #4]
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	408a      	lsls	r2, r1
 8000c10:	43d2      	mvns	r2, r2
 8000c12:	4013      	ands	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
		pGPIO->pGPIOx->OTYPER = tempReg | (pGPIO->GPIO_PinConfig.GPIO_PinOpType << pGPIO->GPIO_PinConfig.GPIO_PinNumber);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	7a1b      	ldrb	r3, [r3, #8]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	791b      	ldrb	r3, [r3, #4]
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	4619      	mov	r1, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	605a      	str	r2, [r3, #4]
    }

    /* Alternate function */
    if(pGPIO->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	795b      	ldrb	r3, [r3, #5]
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d157      	bne.n	8000ce8 <GPIO_Init+0x324>
    {
        tempReg = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	613b      	str	r3, [r7, #16]
        if(pGPIO->GPIO_PinConfig.GPIO_PinNumber < 8)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	791b      	ldrb	r3, [r3, #4]
 8000c40:	2b07      	cmp	r3, #7
 8000c42:	d833      	bhi.n	8000cac <GPIO_Init+0x2e8>
        {
            tempReg = pGPIO->pGPIOx->AFR[0] & ~(0xF << pGPIO->GPIO_PinConfig.GPIO_PinNumber * 4);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	6a1b      	ldr	r3, [r3, #32]
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	7912      	ldrb	r2, [r2, #4]
 8000c4e:	0092      	lsls	r2, r2, #2
 8000c50:	210f      	movs	r1, #15
 8000c52:	fa01 f202 	lsl.w	r2, r1, r2
 8000c56:	43d2      	mvns	r2, r2
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
            pGPIO->pGPIOx->AFR[0] = tempReg | (pGPIO->GPIO_PinConfig.GPIO_AltFunMode << pGPIO->GPIO_PinConfig.GPIO_PinNumber * 4);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	7a5b      	ldrb	r3, [r3, #9]
 8000c60:	461a      	mov	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	791b      	ldrb	r3, [r3, #4]
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	430a      	orrs	r2, r1
 8000c76:	621a      	str	r2, [r3, #32]
            uint8_t PinLocation = pGPIO->GPIO_PinConfig.GPIO_PinNumber % 8;
            tempReg = pGPIO->pGPIOx->AFR[1] & ~(0xF << PinLocation * 4); /* 4 bits need to be deleted */
            pGPIO->pGPIOx->AFR[1] = tempReg | (pGPIO->GPIO_PinConfig.GPIO_AltFunMode << PinLocation * 4);
        }
    }
    return;
 8000c78:	e036      	b.n	8000ce8 <GPIO_Init+0x324>
 8000c7a:	bf00      	nop
 8000c7c:	40013c00 	.word	0x40013c00
 8000c80:	40020000 	.word	0x40020000
 8000c84:	40020400 	.word	0x40020400
 8000c88:	40020800 	.word	0x40020800
 8000c8c:	40020c00 	.word	0x40020c00
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40021400 	.word	0x40021400
 8000c98:	40021800 	.word	0x40021800
 8000c9c:	40021c00 	.word	0x40021c00
 8000ca0:	40022000 	.word	0x40022000
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40013800 	.word	0x40013800
            uint8_t PinLocation = pGPIO->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	791b      	ldrb	r3, [r3, #4]
 8000cb0:	f003 0307 	and.w	r3, r3, #7
 8000cb4:	73fb      	strb	r3, [r7, #15]
            tempReg = pGPIO->pGPIOx->AFR[1] & ~(0xF << PinLocation * 4); /* 4 bits need to be deleted */
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cbc:	7bfa      	ldrb	r2, [r7, #15]
 8000cbe:	0092      	lsls	r2, r2, #2
 8000cc0:	210f      	movs	r1, #15
 8000cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc6:	43d2      	mvns	r2, r2
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
            pGPIO->pGPIOx->AFR[1] = tempReg | (pGPIO->GPIO_PinConfig.GPIO_AltFunMode << PinLocation * 4);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	7a5b      	ldrb	r3, [r3, #9]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	4619      	mov	r1, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	625a      	str	r2, [r3, #36]	; 0x24
    return;
 8000ce6:	bf00      	nop
 8000ce8:	bf00      	nop
}
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <GPIO_PeriClockControl>:
 *
 * @Note            -
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx,uint8_t EnorDi)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE)
 8000cfc:	78fb      	ldrb	r3, [r7, #3]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d164      	bne.n	8000dcc <GPIO_PeriClockControl+0xdc>
    {
        if(pGPIOx == GPIOA)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a66      	ldr	r2, [pc, #408]	; (8000ea0 <GPIO_PeriClockControl+0x1b0>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d105      	bne.n	8000d16 <GPIO_PeriClockControl+0x26>
        {
            GPIOA_PCLK_EN();
 8000d0a:	4b66      	ldr	r3, [pc, #408]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a65      	ldr	r2, [pc, #404]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
        }
        if(pGPIOx == GPIOB)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a63      	ldr	r2, [pc, #396]	; (8000ea8 <GPIO_PeriClockControl+0x1b8>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d105      	bne.n	8000d2a <GPIO_PeriClockControl+0x3a>
        {
            GPIOB_PCLK_EN();
 8000d1e:	4b61      	ldr	r3, [pc, #388]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a60      	ldr	r2, [pc, #384]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
        }
        if(pGPIOx == GPIOC)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a5f      	ldr	r2, [pc, #380]	; (8000eac <GPIO_PeriClockControl+0x1bc>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d105      	bne.n	8000d3e <GPIO_PeriClockControl+0x4e>
        {
            GPIOC_PCLK_EN();
 8000d32:	4b5c      	ldr	r3, [pc, #368]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a5b      	ldr	r2, [pc, #364]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
        }
        if(pGPIOx == GPIOD)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a5b      	ldr	r2, [pc, #364]	; (8000eb0 <GPIO_PeriClockControl+0x1c0>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d105      	bne.n	8000d52 <GPIO_PeriClockControl+0x62>
        {
            GPIOD_PCLK_EN();
 8000d46:	4b57      	ldr	r3, [pc, #348]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a56      	ldr	r2, [pc, #344]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000d4c:	f043 0308 	orr.w	r3, r3, #8
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
        }
        if(pGPIOx == GPIOE)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a57      	ldr	r2, [pc, #348]	; (8000eb4 <GPIO_PeriClockControl+0x1c4>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d105      	bne.n	8000d66 <GPIO_PeriClockControl+0x76>
        {
            GPIOE_PCLK_EN();
 8000d5a:	4b52      	ldr	r3, [pc, #328]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a51      	ldr	r2, [pc, #324]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000d60:	f043 0310 	orr.w	r3, r3, #16
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
        }
        if(pGPIOx == GPIOF)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a53      	ldr	r2, [pc, #332]	; (8000eb8 <GPIO_PeriClockControl+0x1c8>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d105      	bne.n	8000d7a <GPIO_PeriClockControl+0x8a>
        {
            GPIOF_PCLK_EN();
 8000d6e:	4b4d      	ldr	r3, [pc, #308]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a4c      	ldr	r2, [pc, #304]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000d74:	f043 0320 	orr.w	r3, r3, #32
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
        }
        if(pGPIOx == GPIOG)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a4f      	ldr	r2, [pc, #316]	; (8000ebc <GPIO_PeriClockControl+0x1cc>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d105      	bne.n	8000d8e <GPIO_PeriClockControl+0x9e>
        {
            GPIOG_PCLK_EN();
 8000d82:	4b48      	ldr	r3, [pc, #288]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a47      	ldr	r2, [pc, #284]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
        }
        if(pGPIOx == GPIOH)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a4b      	ldr	r2, [pc, #300]	; (8000ec0 <GPIO_PeriClockControl+0x1d0>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d105      	bne.n	8000da2 <GPIO_PeriClockControl+0xb2>
        {
            GPIOH_PCLK_EN();
 8000d96:	4b43      	ldr	r3, [pc, #268]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a42      	ldr	r2, [pc, #264]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
        }
        if(pGPIOx == GPIOI)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a47      	ldr	r2, [pc, #284]	; (8000ec4 <GPIO_PeriClockControl+0x1d4>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d105      	bne.n	8000db6 <GPIO_PeriClockControl+0xc6>
        {
            GPIOI_PCLK_EN();
 8000daa:	4b3e      	ldr	r3, [pc, #248]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a3d      	ldr	r2, [pc, #244]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
        }
        if(pGPIOx == GPIOJ)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a43      	ldr	r2, [pc, #268]	; (8000ec8 <GPIO_PeriClockControl+0x1d8>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d16a      	bne.n	8000e94 <GPIO_PeriClockControl+0x1a4>
        {
            GPIOJ_PCLK_EN();
 8000dbe:	4b39      	ldr	r3, [pc, #228]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a38      	ldr	r2, [pc, #224]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000dc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
        if(pGPIOx == GPIOJ)
        {
            GPIOJ_PCLK_DI();
        }
    }
}
 8000dca:	e063      	b.n	8000e94 <GPIO_PeriClockControl+0x1a4>
        if(pGPIOx == GPIOA)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a34      	ldr	r2, [pc, #208]	; (8000ea0 <GPIO_PeriClockControl+0x1b0>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d105      	bne.n	8000de0 <GPIO_PeriClockControl+0xf0>
            GPIOA_PCLK_DI();
 8000dd4:	4b33      	ldr	r3, [pc, #204]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	4a32      	ldr	r2, [pc, #200]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000dda:	f023 0301 	bic.w	r3, r3, #1
 8000dde:	6313      	str	r3, [r2, #48]	; 0x30
        if(pGPIOx == GPIOB)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a31      	ldr	r2, [pc, #196]	; (8000ea8 <GPIO_PeriClockControl+0x1b8>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d105      	bne.n	8000df4 <GPIO_PeriClockControl+0x104>
            GPIOB_PCLK_DI();
 8000de8:	4b2e      	ldr	r3, [pc, #184]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dec:	4a2d      	ldr	r2, [pc, #180]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000dee:	f023 0302 	bic.w	r3, r3, #2
 8000df2:	6313      	str	r3, [r2, #48]	; 0x30
        if(pGPIOx == GPIOC)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a2d      	ldr	r2, [pc, #180]	; (8000eac <GPIO_PeriClockControl+0x1bc>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d105      	bne.n	8000e08 <GPIO_PeriClockControl+0x118>
            GPIOC_PCLK_DI();
 8000dfc:	4b29      	ldr	r3, [pc, #164]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e00:	4a28      	ldr	r2, [pc, #160]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000e02:	f023 0304 	bic.w	r3, r3, #4
 8000e06:	6313      	str	r3, [r2, #48]	; 0x30
        if(pGPIOx == GPIOD)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a29      	ldr	r2, [pc, #164]	; (8000eb0 <GPIO_PeriClockControl+0x1c0>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d105      	bne.n	8000e1c <GPIO_PeriClockControl+0x12c>
            GPIOD_PCLK_DI();
 8000e10:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e14:	4a23      	ldr	r2, [pc, #140]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000e16:	f023 0308 	bic.w	r3, r3, #8
 8000e1a:	6313      	str	r3, [r2, #48]	; 0x30
        if(pGPIOx == GPIOE)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a25      	ldr	r2, [pc, #148]	; (8000eb4 <GPIO_PeriClockControl+0x1c4>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d105      	bne.n	8000e30 <GPIO_PeriClockControl+0x140>
            GPIOE_PCLK_DI();
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	4a1e      	ldr	r2, [pc, #120]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000e2a:	f023 0310 	bic.w	r3, r3, #16
 8000e2e:	6313      	str	r3, [r2, #48]	; 0x30
        if(pGPIOx == GPIOF)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a21      	ldr	r2, [pc, #132]	; (8000eb8 <GPIO_PeriClockControl+0x1c8>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d105      	bne.n	8000e44 <GPIO_PeriClockControl+0x154>
            GPIOF_PCLK_DI();
 8000e38:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3c:	4a19      	ldr	r2, [pc, #100]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000e3e:	f023 0320 	bic.w	r3, r3, #32
 8000e42:	6313      	str	r3, [r2, #48]	; 0x30
        if(pGPIOx == GPIOG)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a1d      	ldr	r2, [pc, #116]	; (8000ebc <GPIO_PeriClockControl+0x1cc>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d105      	bne.n	8000e58 <GPIO_PeriClockControl+0x168>
            GPIOG_PCLK_DI();
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e56:	6313      	str	r3, [r2, #48]	; 0x30
        if(pGPIOx == GPIOH)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a19      	ldr	r2, [pc, #100]	; (8000ec0 <GPIO_PeriClockControl+0x1d0>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d105      	bne.n	8000e6c <GPIO_PeriClockControl+0x17c>
            GPIOH_PCLK_DI();
 8000e60:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e64:	4a0f      	ldr	r2, [pc, #60]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e6a:	6313      	str	r3, [r2, #48]	; 0x30
        if(pGPIOx == GPIOI)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a15      	ldr	r2, [pc, #84]	; (8000ec4 <GPIO_PeriClockControl+0x1d4>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d105      	bne.n	8000e80 <GPIO_PeriClockControl+0x190>
            GPIOI_PCLK_DI();
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000e7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e7e:	6313      	str	r3, [r2, #48]	; 0x30
        if(pGPIOx == GPIOJ)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a11      	ldr	r2, [pc, #68]	; (8000ec8 <GPIO_PeriClockControl+0x1d8>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d105      	bne.n	8000e94 <GPIO_PeriClockControl+0x1a4>
            GPIOJ_PCLK_DI();
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8c:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <GPIO_PeriClockControl+0x1b4>)
 8000e8e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000e92:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40020000 	.word	0x40020000
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020400 	.word	0x40020400
 8000eac:	40020800 	.word	0x40020800
 8000eb0:	40020c00 	.word	0x40020c00
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40021400 	.word	0x40021400
 8000ebc:	40021800 	.word	0x40021800
 8000ec0:	40021c00 	.word	0x40021c00
 8000ec4:	40022000 	.word	0x40022000
 8000ec8:	40022400 	.word	0x40022400

08000ecc <GPIO_PriorityConfig>:
    /* another implementation for this function */
    pGPIOx->ODR ^= (1 << PinNum);
    return;
}
void GPIO_PriorityConfig(uint8_t IRQNumber, uint8_t Priority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	460a      	mov	r2, r1
 8000ed6:	71fb      	strb	r3, [r7, #7]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	71bb      	strb	r3, [r7, #6]
#if 1
    uint8_t RegLocation = IRQNumber / 4;
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	089b      	lsrs	r3, r3, #2
 8000ee0:	73fb      	strb	r3, [r7, #15]
    uint8_t FieldLocation = IRQNumber % 4 ;
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f003 0303 	and.w	r3, r3, #3
 8000ee8:	73bb      	strb	r3, [r7, #14]
    uint8_t shift_amount = FieldLocation * 8 + 8 - IMPLEMENTED_BITS;
 8000eea:	7bbb      	ldrb	r3, [r7, #14]
 8000eec:	3301      	adds	r3, #1
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	3b04      	subs	r3, #4
 8000ef6:	737b      	strb	r3, [r7, #13]
    uint32_t tempReg = NVIC->IPR[RegLocation] & ~(0xF << shift_amount);
 8000ef8:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <GPIO_PriorityConfig+0x68>)
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	33c0      	adds	r3, #192	; 0xc0
 8000efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f02:	7b7a      	ldrb	r2, [r7, #13]
 8000f04:	210f      	movs	r1, #15
 8000f06:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0a:	43d2      	mvns	r2, r2
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60bb      	str	r3, [r7, #8]
    NVIC->IPR[RegLocation] = tempReg | (Priority << shift_amount);
 8000f10:	79ba      	ldrb	r2, [r7, #6]
 8000f12:	7b7b      	ldrb	r3, [r7, #13]
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	4618      	mov	r0, r3
 8000f1a:	4906      	ldr	r1, [pc, #24]	; (8000f34 <GPIO_PriorityConfig+0x68>)
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	4302      	orrs	r2, r0
 8000f22:	33c0      	adds	r3, #192	; 0xc0
 8000f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return;
 8000f28:	bf00      	nop

	*(  NVIC_PR_BASE_ADDR + iprx  ) |=  ( Priority << shift_amount );
#endif


}
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000e100 	.word	0xe000e100

08000f38 <GPIO_InteruptConfig>:
 *
 * @Note            -
 *
 */
void GPIO_InteruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	460a      	mov	r2, r1
 8000f42:	71fb      	strb	r3, [r7, #7]
 8000f44:	4613      	mov	r3, r2
 8000f46:	71bb      	strb	r3, [r7, #6]
#if 1
    /* @NVIC_CONFIGURATION relation */
    uint8_t RegLocation = IRQNumber / 32;
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	095b      	lsrs	r3, r3, #5
 8000f4c:	73fb      	strb	r3, [r7, #15]
    uint8_t FieldLocation = IRQNumber % 32;
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f003 031f 	and.w	r3, r3, #31
 8000f54:	73bb      	strb	r3, [r7, #14]
    uint32_t tempReg;
    if(EnorDi == ENABLE)
 8000f56:	79bb      	ldrb	r3, [r7, #6]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d116      	bne.n	8000f8a <GPIO_InteruptConfig+0x52>
    {
        tempReg = NVIC->ISER[RegLocation] & ~(1 <<FieldLocation);
 8000f5c:	4a16      	ldr	r2, [pc, #88]	; (8000fb8 <GPIO_InteruptConfig+0x80>)
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f64:	7bba      	ldrb	r2, [r7, #14]
 8000f66:	2101      	movs	r1, #1
 8000f68:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6c:	43d2      	mvns	r2, r2
 8000f6e:	4013      	ands	r3, r2
 8000f70:	60bb      	str	r3, [r7, #8]
        NVIC->ISER[RegLocation] = tempReg | (ENABLE << FieldLocation);
 8000f72:	7bbb      	ldrb	r3, [r7, #14]
 8000f74:	2201      	movs	r2, #1
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	490e      	ldr	r1, [pc, #56]	; (8000fb8 <GPIO_InteruptConfig+0x80>)
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	68ba      	ldr	r2, [r7, #8]
 8000f82:	4302      	orrs	r2, r0
 8000f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    else
    {
        tempReg = NVIC->ICER[RegLocation] & ~(1 <<FieldLocation);
        NVIC->ICER[RegLocation] = tempReg | (DISABLE << FieldLocation);
    }
    return;
 8000f88:	e012      	b.n	8000fb0 <GPIO_InteruptConfig+0x78>
        tempReg = NVIC->ICER[RegLocation] & ~(1 <<FieldLocation);
 8000f8a:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <GPIO_InteruptConfig+0x80>)
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	3320      	adds	r3, #32
 8000f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f94:	7bba      	ldrb	r2, [r7, #14]
 8000f96:	2101      	movs	r1, #1
 8000f98:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9c:	43d2      	mvns	r2, r2
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	60bb      	str	r3, [r7, #8]
        NVIC->ICER[RegLocation] = tempReg | (DISABLE << FieldLocation);
 8000fa2:	4905      	ldr	r1, [pc, #20]	; (8000fb8 <GPIO_InteruptConfig+0x80>)
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	3320      	adds	r3, #32
 8000fa8:	68ba      	ldr	r2, [r7, #8]
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return;
 8000fae:	bf00      	nop
    			//program ICER2 register
    			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
    		}
        }
#endif
}
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	e000e100 	.word	0xe000e100

08000fbc <GPIO_IrqHandling>:
 *
 * @Note            -
 *
 */
void GPIO_IrqHandling(uint8_t PinNum)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	if(EXTI->PR & (1 << PinNum))
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <GPIO_IrqHandling+0x3c>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	79fa      	ldrb	r2, [r7, #7]
 8000fcc:	2101      	movs	r1, #1
 8000fce:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d009      	beq.n	8000fec <GPIO_IrqHandling+0x30>
	{
		EXTI->PR |= (1 << PinNum);
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <GPIO_IrqHandling+0x3c>)
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	79fa      	ldrb	r2, [r7, #7]
 8000fde:	2101      	movs	r1, #1
 8000fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <GPIO_IrqHandling+0x3c>)
 8000fe8:	430b      	orrs	r3, r1
 8000fea:	6153      	str	r3, [r2, #20]
	}
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40013c00 	.word	0x40013c00

08000ffc <TXEIE_Control>:
#include "stm32f4xx_uart.h"
static inline void TXEIE_Control(UART_RegDef_t *USARTx,uint8_t EnorDi)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE)
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d106      	bne.n	800101c <TXEIE_Control+0x20>
    {
        USARTx->CR1 |= 1 << UART_TXE_BIT_POS;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60da      	str	r2, [r3, #12]
    }
    else
    {
        USARTx->CR1 &= ~(1 << UART_TXE_BIT_POS);
    }
}
 800101a:	e005      	b.n	8001028 <TXEIE_Control+0x2c>
        USARTx->CR1 &= ~(1 << UART_TXE_BIT_POS);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	60da      	str	r2, [r3, #12]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr

08001032 <Is_TXEIE_Enable>:
static inline uint8_t Is_TXEIE_Enable(UART_RegDef_t *USARTx)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
    return (USARTx->CR1 >> UART_TXE_BIT_POS ) & 0x1;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	09db      	lsrs	r3, r3, #7
 8001040:	b2db      	uxtb	r3, r3
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	b2db      	uxtb	r3, r3
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr

08001052 <Is_TXE_Set>:
static inline uint8_t Is_TXE_Set(UART_RegDef_t *USARTx)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
    return (USARTx->SR >> UART_TXE_BIT_POS ) & 0x1;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	09db      	lsrs	r3, r3, #7
 8001060:	b2db      	uxtb	r3, r3
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	b2db      	uxtb	r3, r3
}
 8001068:	4618      	mov	r0, r3
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr

08001072 <GetPLLClock>:
uint32_t GetPLLClock()
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
	return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <Control_USART>:
void Control_USART(UART_RegDef_t *USARTx,uint8_t EnOrDi)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	70fb      	strb	r3, [r7, #3]
    if(EnOrDi == ENABLE)
 800108c:	78fb      	ldrb	r3, [r7, #3]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d106      	bne.n	80010a0 <Control_USART+0x20>
    {
        USARTx->CR1 |= 1 << UART_UE_BIT_POS;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	60da      	str	r2, [r3, #12]
    }
    else
    {
        USARTx->CR1 &= ~(1 << UART_UE_BIT_POS);
    }
}
 800109e:	e005      	b.n	80010ac <Control_USART+0x2c>
        USARTx->CR1 &= ~(1 << UART_UE_BIT_POS);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	60da      	str	r2, [r3, #12]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr

080010b6 <Transmission_Control>:
static inline void Transmission_Control(UART_RegDef_t *USARTx,uint8_t EnOrDi)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	460b      	mov	r3, r1
 80010c0:	70fb      	strb	r3, [r7, #3]
    if(EnOrDi == ENABLE)
 80010c2:	78fb      	ldrb	r3, [r7, #3]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d106      	bne.n	80010d6 <Transmission_Control+0x20>
    {
        USARTx->CR1 |= 1 << UART_TE_BIT_POS;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	f043 0208 	orr.w	r2, r3, #8
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	60da      	str	r2, [r3, #12]
    }
    else
    {
        USARTx->CR1 &= ~(1 << UART_TE_BIT_POS);
    }
}
 80010d4:	e005      	b.n	80010e2 <Transmission_Control+0x2c>
        USARTx->CR1 &= ~(1 << UART_TE_BIT_POS);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	f023 0208 	bic.w	r2, r3, #8
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	60da      	str	r2, [r3, #12]
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr

080010ec <GetClock>:
static inline uint8_t Busy_Tx(UART_RegDef_t *USARTx)
{
    return ((USARTx->SR >> UART_TXE_BIT_POS) & 0x1);
}
static uint32_t GetClock(void)
{
 80010ec:	b5b0      	push	{r4, r5, r7, lr}
 80010ee:	b08c      	sub	sp, #48	; 0x30
 80010f0:	af00      	add	r7, sp, #0
	uint16_t AHB_ClockPre[]={2,4,8,16,32,64,128,256,512};
 80010f2:	4b36      	ldr	r3, [pc, #216]	; (80011cc <GetClock+0xe0>)
 80010f4:	f107 040c 	add.w	r4, r7, #12
 80010f8:	461d      	mov	r5, r3
 80010fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010fe:	682b      	ldr	r3, [r5, #0]
 8001100:	8023      	strh	r3, [r4, #0]
	uint16_t APB1_ClockPre[]={2,4,8,16};
 8001102:	4a33      	ldr	r2, [pc, #204]	; (80011d0 <GetClock+0xe4>)
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	e892 0003 	ldmia.w	r2, {r0, r1}
 800110a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t Clock,SystemClk;
	uint16_t AHBPre;
	uint16_t APB1Pre;
	uint8_t ClockSource;
	ClockSource = (RCC->CFGR >> 2) & (0x3);
 800110e:	4b31      	ldr	r3, [pc, #196]	; (80011d4 <GetClock+0xe8>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	089b      	lsrs	r3, r3, #2
 8001114:	b2db      	uxtb	r3, r3
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(ClockSource == 0)
 800111e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001122:	2b00      	cmp	r3, #0
 8001124:	d102      	bne.n	800112c <GetClock+0x40>
	{
		SystemClk = 16000000;
 8001126:	4b2c      	ldr	r3, [pc, #176]	; (80011d8 <GetClock+0xec>)
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800112a:	e00d      	b.n	8001148 <GetClock+0x5c>
	}
	else if(ClockSource == 1)
 800112c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001130:	2b01      	cmp	r3, #1
 8001132:	d102      	bne.n	800113a <GetClock+0x4e>
	{
		SystemClk = 8000000;
 8001134:	4b29      	ldr	r3, [pc, #164]	; (80011dc <GetClock+0xf0>)
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001138:	e006      	b.n	8001148 <GetClock+0x5c>
	}
	else if(ClockSource == 2)
 800113a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800113e:	2b02      	cmp	r3, #2
 8001140:	d102      	bne.n	8001148 <GetClock+0x5c>
	{
		SystemClk = GetPLLClock();
 8001142:	f7ff ff96 	bl	8001072 <GetPLLClock>
 8001146:	62f8      	str	r0, [r7, #44]	; 0x2c
	}
	int8_t temp =((RCC->CFGR >> 4)&(0xF)) - 8;
 8001148:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <GetClock+0xe8>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	091b      	lsrs	r3, r3, #4
 800114e:	b2db      	uxtb	r3, r3
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	b2db      	uxtb	r3, r3
 8001156:	3b08      	subs	r3, #8
 8001158:	b2db      	uxtb	r3, r3
 800115a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(temp < 8)
 800115e:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001162:	2b07      	cmp	r3, #7
 8001164:	dc02      	bgt.n	800116c <GetClock+0x80>
	{
		AHBPre = 1;
 8001166:	2301      	movs	r3, #1
 8001168:	857b      	strh	r3, [r7, #42]	; 0x2a
 800116a:	e007      	b.n	800117c <GetClock+0x90>
	}
	else
	{
		AHBPre = AHB_ClockPre[temp];
 800116c:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	3330      	adds	r3, #48	; 0x30
 8001174:	443b      	add	r3, r7
 8001176:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800117a:	857b      	strh	r3, [r7, #42]	; 0x2a
	}
	temp = ((RCC->CFGR >> 10)&(0x7)) - 4;
 800117c:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <GetClock+0xe8>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	0a9b      	lsrs	r3, r3, #10
 8001182:	b2db      	uxtb	r3, r3
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	b2db      	uxtb	r3, r3
 800118a:	3b04      	subs	r3, #4
 800118c:	b2db      	uxtb	r3, r3
 800118e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(temp < 4)
 8001192:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001196:	2b03      	cmp	r3, #3
 8001198:	dc02      	bgt.n	80011a0 <GetClock+0xb4>
	{
		APB1Pre = 1;
 800119a:	2301      	movs	r3, #1
 800119c:	853b      	strh	r3, [r7, #40]	; 0x28
 800119e:	e007      	b.n	80011b0 <GetClock+0xc4>
	}
	else
	{
		APB1Pre = APB1_ClockPre[temp];
 80011a0:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	3330      	adds	r3, #48	; 0x30
 80011a8:	443b      	add	r3, r7
 80011aa:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 80011ae:	853b      	strh	r3, [r7, #40]	; 0x28
	}
	Clock = (SystemClk / AHBPre)/APB1Pre;
 80011b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80011b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80011b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80011ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80011be:	623b      	str	r3, [r7, #32]
	return Clock;
 80011c0:	6a3b      	ldr	r3, [r7, #32]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3730      	adds	r7, #48	; 0x30
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bdb0      	pop	{r4, r5, r7, pc}
 80011ca:	bf00      	nop
 80011cc:	080017b8 	.word	0x080017b8
 80011d0:	080017cc 	.word	0x080017cc
 80011d4:	40023800 	.word	0x40023800
 80011d8:	00f42400 	.word	0x00f42400
 80011dc:	007a1200 	.word	0x007a1200

080011e0 <BaudRateSetting>:
static inline void BaudRateSetting(UART_RegDef_t *USARTx,uint32_t BaudRate)
{
 80011e0:	b5b0      	push	{r4, r5, r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
    /* USARTDIV = DIV_Mantissa + (DIV_Fraction / 8 × (2 – OVER8)) */
    /* Tx/Rx baud = fCK / (8 x (2-OVER8) × USARTDIV) */
    uint32_t Clock = GetClock();
 80011ea:	f7ff ff7f 	bl	80010ec <GetClock>
 80011ee:	6138      	str	r0, [r7, #16]
    double USARTDIV = 0;
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	f04f 0300 	mov.w	r3, #0
 80011f8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    uint16_t DIV_Mantissa = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	82fb      	strh	r3, [r7, #22]
    uint8_t DIV_Fraction = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	757b      	strb	r3, [r7, #21]
    /* using OVER8 = 0 */
    //USARTx->CR1 |= 1 << UART_OVER8_BIT_POS;
    USARTDIV = ((double)Clock / BaudRate ) / 16;
 8001204:	6938      	ldr	r0, [r7, #16]
 8001206:	f7ff f931 	bl	800046c <__aeabi_ui2d>
 800120a:	4604      	mov	r4, r0
 800120c:	460d      	mov	r5, r1
 800120e:	6838      	ldr	r0, [r7, #0]
 8001210:	f7ff f92c 	bl	800046c <__aeabi_ui2d>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4620      	mov	r0, r4
 800121a:	4629      	mov	r1, r5
 800121c:	f7ff faca 	bl	80007b4 <__aeabi_ddiv>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <BaudRateSetting+0xd0>)
 800122e:	f7ff fac1 	bl	80007b4 <__aeabi_ddiv>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	e9c7 2302 	strd	r2, r3, [r7, #8]
    DIV_Mantissa = ( Clock / BaudRate ) / 16;
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001242:	091b      	lsrs	r3, r3, #4
 8001244:	82fb      	strh	r3, [r7, #22]
    DIV_Fraction = (USARTDIV - (double)DIV_Mantissa) * 16;
 8001246:	8afb      	ldrh	r3, [r7, #22]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f90f 	bl	800046c <__aeabi_ui2d>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001256:	f7fe ffcb 	bl	80001f0 <__aeabi_dsub>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <BaudRateSetting+0xd0>)
 8001268:	f7ff f97a 	bl	8000560 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f7ff fb86 	bl	8000984 <__aeabi_d2uiz>
 8001278:	4603      	mov	r3, r0
 800127a:	757b      	strb	r3, [r7, #21]
    if(DIV_Fraction >=16)
 800127c:	7d7b      	ldrb	r3, [r7, #21]
 800127e:	2b0f      	cmp	r3, #15
 8001280:	d904      	bls.n	800128c <BaudRateSetting+0xac>
    {
        DIV_Fraction = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	757b      	strb	r3, [r7, #21]
        DIV_Mantissa++;
 8001286:	8afb      	ldrh	r3, [r7, #22]
 8001288:	3301      	adds	r3, #1
 800128a:	82fb      	strh	r3, [r7, #22]
    }
    USARTx->BRR |= DIV_Mantissa << UART_MANTISSA_POS;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	8afa      	ldrh	r2, [r7, #22]
 8001292:	0112      	lsls	r2, r2, #4
 8001294:	431a      	orrs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	609a      	str	r2, [r3, #8]
    USARTx->BRR |= DIV_Fraction << UART_FRACTION_POS;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	7d7b      	ldrb	r3, [r7, #21]
 80012a0:	431a      	orrs	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	609a      	str	r2, [r3, #8]
}
 80012a6:	bf00      	nop
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bdb0      	pop	{r4, r5, r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40300000 	.word	0x40300000

080012b4 <USART_Init>:
void USART_Init(USART_Handle_t *USART_Handle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
    USART_PeriClockControl(USART_Handle->USARTx,ENABLE);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2101      	movs	r1, #1
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 f872 	bl	80013ac <USART_PeriClockControl>
    if(USART_Handle->UART_Config.USARTEnable == USART_ENABLE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	791b      	ldrb	r3, [r3, #4]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d107      	bne.n	80012e0 <USART_Init+0x2c>
    {
        USART_Handle->USARTx->CR1 |= (1<<UART_USART_ENABLE_BIT_POS);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68da      	ldr	r2, [r3, #12]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012de:	60da      	str	r2, [r3, #12]
    }
    if(USART_Handle->UART_Config.WordLength == UART_WORD_LENGTH_9_BITS)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	795b      	ldrb	r3, [r3, #5]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d107      	bne.n	80012f8 <USART_Init+0x44>
    {
        USART_Handle->USARTx->CR1 |= (1<<UART_M_BIT_POS);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80012f6:	60da      	str	r2, [r3, #12]
    }
    if(USART_Handle->UART_Config.Parity == UART_PARITY_ENABLE)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	799b      	ldrb	r3, [r3, #6]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d107      	bne.n	8001310 <USART_Init+0x5c>
    {
        USART_Handle->USARTx->CR1 |= (1<<UART_PCE_BIT_POS);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68da      	ldr	r2, [r3, #12]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800130e:	60da      	str	r2, [r3, #12]
    }
    if((USART_Handle->UART_Config.Parity == UART_PARITY_ENABLE) &&(USART_Handle->UART_Config.ParitySelection == UART_ODD_PARITY))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	799b      	ldrb	r3, [r3, #6]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d10b      	bne.n	8001330 <USART_Init+0x7c>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	79db      	ldrb	r3, [r3, #7]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d107      	bne.n	8001330 <USART_Init+0x7c>
    {
        USART_Handle->USARTx->CR1 |= (1<<UART_PARITY_SELECTION_BIT_POS);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800132e:	60da      	str	r2, [r3, #12]
    }
    switch (USART_Handle->UART_Config.NumberOfStopBit)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	7a1b      	ldrb	r3, [r3, #8]
 8001334:	2b03      	cmp	r3, #3
 8001336:	d82d      	bhi.n	8001394 <USART_Init+0xe0>
 8001338:	a201      	add	r2, pc, #4	; (adr r2, 8001340 <USART_Init+0x8c>)
 800133a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133e:	bf00      	nop
 8001340:	08001351 	.word	0x08001351
 8001344:	0800135f 	.word	0x0800135f
 8001348:	08001371 	.word	0x08001371
 800134c:	08001383 	.word	0x08001383
    {
        case STOP_BIT_1:
            USART_Handle->USARTx->CR2 |= (STOP_BIT_1<<UART_STOP_BITS_BIT_POS);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6912      	ldr	r2, [r2, #16]
 800135a:	611a      	str	r2, [r3, #16]
        break;
 800135c:	e01a      	b.n	8001394 <USART_Init+0xe0>
        case STOP_BIT_0_5:
            USART_Handle->USARTx->CR2 |= (STOP_BIT_0_5<<UART_STOP_BITS_BIT_POS);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	691a      	ldr	r2, [r3, #16]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800136c:	611a      	str	r2, [r3, #16]
        break;
 800136e:	e011      	b.n	8001394 <USART_Init+0xe0>
        case STOP_BIT_2:
            USART_Handle->USARTx->CR2 |= (STOP_BIT_2<<UART_STOP_BITS_BIT_POS);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	691a      	ldr	r2, [r3, #16]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800137e:	611a      	str	r2, [r3, #16]
        break;
 8001380:	e008      	b.n	8001394 <USART_Init+0xe0>
        case STOP_BIT_1_5:
            USART_Handle->USARTx->CR2 |= (STOP_BIT_1_5<<UART_STOP_BITS_BIT_POS);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001390:	611a      	str	r2, [r3, #16]
        break;
 8001392:	bf00      	nop
    }
    BaudRateSetting(USART_Handle->USARTx,USART_Handle->UART_Config.BaudRate);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	4619      	mov	r1, r3
 800139e:	4610      	mov	r0, r2
 80013a0:	f7ff ff1e 	bl	80011e0 <BaudRateSetting>

}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <USART_PeriClockControl>:
void USART_PeriClockControl(UART_RegDef_t *USARTx,uint8_t EnorDi)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE)
 80013b8:	78fb      	ldrb	r3, [r7, #3]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d10a      	bne.n	80013d4 <USART_PeriClockControl+0x28>
    {
        if(USARTx == UART4)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a0c      	ldr	r2, [pc, #48]	; (80013f4 <USART_PeriClockControl+0x48>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d110      	bne.n	80013e8 <USART_PeriClockControl+0x3c>
        {
            UART4_PCLK_EN();
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <USART_PeriClockControl+0x4c>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <USART_PeriClockControl+0x4c>)
 80013cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
        if(USARTx == UART4)
        {
            UART4_PCLK_DI();
        }
    }
}
 80013d2:	e009      	b.n	80013e8 <USART_PeriClockControl+0x3c>
        if(USARTx == UART4)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <USART_PeriClockControl+0x48>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d105      	bne.n	80013e8 <USART_PeriClockControl+0x3c>
            UART4_PCLK_DI();
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <USART_PeriClockControl+0x4c>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <USART_PeriClockControl+0x4c>)
 80013e2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80013e6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40004c00 	.word	0x40004c00
 80013f8:	40023800 	.word	0x40023800

080013fc <USART_Handling>:
void USART_Handling(USART_Handle_t *USART_Handle_t)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
    if(Is_TXEIE_Enable(USART_Handle_t->USARTx) && Is_TXE_Set(USART_Handle_t->USARTx))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fe12 	bl	8001032 <Is_TXEIE_Enable>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d02b      	beq.n	800146c <USART_Handling+0x70>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fe1a 	bl	8001052 <Is_TXE_Set>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d023      	beq.n	800146c <USART_Handling+0x70>
    {
        Transmission_Control(USART_Handle_t->USARTx,ENABLE);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2101      	movs	r1, #1
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fe43 	bl	80010b6 <Transmission_Control>
        USART_Handle_t->USARTx->DR = *USART_Handle_t->TxBuffer;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	781a      	ldrb	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
        USART_Handle_t->TxBuffer++;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	1c5a      	adds	r2, r3, #1
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	611a      	str	r2, [r3, #16]
        USART_Handle_t->TxLength--;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	7d1b      	ldrb	r3, [r3, #20]
 800144a:	3b01      	subs	r3, #1
 800144c:	b2da      	uxtb	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	751a      	strb	r2, [r3, #20]
        if(USART_Handle_t->TxLength == 0)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	7d1b      	ldrb	r3, [r3, #20]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d108      	bne.n	800146c <USART_Handling+0x70>
        {
        	USART_Handle_t->TxState = UART_READY;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2202      	movs	r2, #2
 800145e:	755a      	strb	r2, [r3, #21]
        	TXEIE_Control(USART_Handle_t->USARTx,DISABLE);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fdc8 	bl	8000ffc <TXEIE_Control>
        }
    }
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <USART_TransmitDataIT>:
uint8_t USART_TransmitDataIT(USART_Handle_t *USART_Handle_t,uint8_t *buffer,uint8_t Length)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	4613      	mov	r3, r2
 8001480:	71fb      	strb	r3, [r7, #7]
    uint8_t state = USART_Handle_t->TxState;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	7d5b      	ldrb	r3, [r3, #21]
 8001486:	75fb      	strb	r3, [r7, #23]
    if(USART_Handle_t->TxState != UART_BUSY_IN_TX)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	7d5b      	ldrb	r3, [r3, #21]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00e      	beq.n	80014ae <USART_TransmitDataIT+0x3a>
    {
        /* set new data  */
        USART_Handle_t->TxBuffer = buffer;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	611a      	str	r2, [r3, #16]
        USART_Handle_t->TxLength = Length;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	79fa      	ldrb	r2, [r7, #7]
 800149a:	751a      	strb	r2, [r3, #20]
        /* set state */
        USART_Handle_t->TxState = UART_BUSY_IN_TX;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2200      	movs	r2, #0
 80014a0:	755a      	strb	r2, [r3, #21]
        /* enable interupt for TXE */
        TXEIE_Control(USART_Handle_t->USARTx,ENABLE);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2101      	movs	r1, #1
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fda7 	bl	8000ffc <TXEIE_Control>
    }
    return state;
 80014ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <USART_InteruptConfig>:
{

}

void USART_InteruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	460a      	mov	r2, r1
 80014c2:	71fb      	strb	r3, [r7, #7]
 80014c4:	4613      	mov	r3, r2
 80014c6:	71bb      	strb	r3, [r7, #6]
    uint8_t RegLocation = IRQNumber / 32;
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	095b      	lsrs	r3, r3, #5
 80014cc:	73fb      	strb	r3, [r7, #15]
    uint8_t FieldLocation = IRQNumber % 32;
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	f003 031f 	and.w	r3, r3, #31
 80014d4:	73bb      	strb	r3, [r7, #14]
    uint32_t tempReg;
    if(EnorDi == ENABLE)
 80014d6:	79bb      	ldrb	r3, [r7, #6]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d116      	bne.n	800150a <USART_InteruptConfig+0x52>
    {
        tempReg = NVIC->ISER[RegLocation] & ~(1 <<FieldLocation);
 80014dc:	4a16      	ldr	r2, [pc, #88]	; (8001538 <USART_InteruptConfig+0x80>)
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e4:	7bba      	ldrb	r2, [r7, #14]
 80014e6:	2101      	movs	r1, #1
 80014e8:	fa01 f202 	lsl.w	r2, r1, r2
 80014ec:	43d2      	mvns	r2, r2
 80014ee:	4013      	ands	r3, r2
 80014f0:	60bb      	str	r3, [r7, #8]
        NVIC->ISER[RegLocation] = tempReg | (ENABLE << FieldLocation);
 80014f2:	7bbb      	ldrb	r3, [r7, #14]
 80014f4:	2201      	movs	r2, #1
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	490e      	ldr	r1, [pc, #56]	; (8001538 <USART_InteruptConfig+0x80>)
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	4302      	orrs	r2, r0
 8001504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    else
    {
        tempReg = NVIC->ICER[RegLocation] & ~(1 <<FieldLocation);
        NVIC->ICER[RegLocation] = tempReg | (DISABLE << FieldLocation);
    }
    return;
 8001508:	e012      	b.n	8001530 <USART_InteruptConfig+0x78>
        tempReg = NVIC->ICER[RegLocation] & ~(1 <<FieldLocation);
 800150a:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <USART_InteruptConfig+0x80>)
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	3320      	adds	r3, #32
 8001510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001514:	7bba      	ldrb	r2, [r7, #14]
 8001516:	2101      	movs	r1, #1
 8001518:	fa01 f202 	lsl.w	r2, r1, r2
 800151c:	43d2      	mvns	r2, r2
 800151e:	4013      	ands	r3, r2
 8001520:	60bb      	str	r3, [r7, #8]
        NVIC->ICER[RegLocation] = tempReg | (DISABLE << FieldLocation);
 8001522:	4905      	ldr	r1, [pc, #20]	; (8001538 <USART_InteruptConfig+0x80>)
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	3320      	adds	r3, #32
 8001528:	68ba      	ldr	r2, [r7, #8]
 800152a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return;
 800152e:	bf00      	nop
}
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	e000e100 	.word	0xe000e100

0800153c <USART_PriorityConfig>:
{

}

void USART_PriorityConfig(uint8_t IRQNumber, uint8_t Priority)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	460a      	mov	r2, r1
 8001546:	71fb      	strb	r3, [r7, #7]
 8001548:	4613      	mov	r3, r2
 800154a:	71bb      	strb	r3, [r7, #6]
    uint8_t RegLocation = IRQNumber / 4;
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	73fb      	strb	r3, [r7, #15]
    uint8_t FieldLocation = IRQNumber % 4 ;
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	73bb      	strb	r3, [r7, #14]
    uint8_t shift_amount = FieldLocation * 8 + 8 - IMPLEMENTED_BITS;
 800155a:	7bbb      	ldrb	r3, [r7, #14]
 800155c:	3301      	adds	r3, #1
 800155e:	b2db      	uxtb	r3, r3
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	b2db      	uxtb	r3, r3
 8001564:	3b04      	subs	r3, #4
 8001566:	737b      	strb	r3, [r7, #13]
    uint32_t tempReg = NVIC->IPR[RegLocation] & ~(0xF << shift_amount);
 8001568:	4a0e      	ldr	r2, [pc, #56]	; (80015a4 <USART_PriorityConfig+0x68>)
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	33c0      	adds	r3, #192	; 0xc0
 800156e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001572:	7b7a      	ldrb	r2, [r7, #13]
 8001574:	210f      	movs	r1, #15
 8001576:	fa01 f202 	lsl.w	r2, r1, r2
 800157a:	43d2      	mvns	r2, r2
 800157c:	4013      	ands	r3, r2
 800157e:	60bb      	str	r3, [r7, #8]
    NVIC->IPR[RegLocation] = tempReg | (Priority << shift_amount);
 8001580:	79ba      	ldrb	r2, [r7, #6]
 8001582:	7b7b      	ldrb	r3, [r7, #13]
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	4618      	mov	r0, r3
 800158a:	4906      	ldr	r1, [pc, #24]	; (80015a4 <USART_PriorityConfig+0x68>)
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	4302      	orrs	r2, r0
 8001592:	33c0      	adds	r3, #192	; 0xc0
 8001594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return;
 8001598:	bf00      	nop
}
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000e100 	.word	0xe000e100

080015a8 <Delay>:
		.GPIO_PinSpeed = GPIO_SPEED_LOW,
		.GPIO_PinPuPdControl = GPIO_PIN_PU,
		.GPIO_AltFunMode = 0
};
void Delay(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
	for(int us = 0 ; us <= 500000 ; us++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	e002      	b.n	80015ba <Delay+0x12>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3301      	adds	r3, #1
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <Delay+0x28>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	ddf8      	ble.n	80015b4 <Delay+0xc>
	{

	}
}
 80015c2:	bf00      	nop
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	0007a120 	.word	0x0007a120

080015d4 <UART4_IRQHandler>:
USART_Handle_t USART_handle;
uint8_t buffer[] = "pham ngoc dat";
void UART4_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
	USART_Handling(&USART_handle);
 80015d8:	4802      	ldr	r0, [pc, #8]	; (80015e4 <UART4_IRQHandler+0x10>)
 80015da:	f7ff ff0f 	bl	80013fc <USART_Handling>
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000034 	.word	0x20000034

080015e8 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	Delay();
 80015ec:	f7ff ffdc 	bl	80015a8 <Delay>
	GPIO_IrqHandling(5);
 80015f0:	2005      	movs	r0, #5
 80015f2:	f7ff fce3 	bl	8000fbc <GPIO_IrqHandling>
	//USART_TransmitData(&USART_handle,buffer,sizeof(buffer));
	USART_TransmitDataIT(&USART_handle,buffer,sizeof(buffer));
 80015f6:	220e      	movs	r2, #14
 80015f8:	4902      	ldr	r1, [pc, #8]	; (8001604 <EXTI9_5_IRQHandler+0x1c>)
 80015fa:	4803      	ldr	r0, [pc, #12]	; (8001608 <EXTI9_5_IRQHandler+0x20>)
 80015fc:	f7ff ff3a 	bl	8001474 <USART_TransmitDataIT>
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000008 	.word	0x20000008
 8001608:	20000034 	.word	0x20000034

0800160c <UART_Initialization>:
void UART_Initialization()
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
	GPIO_Handle_t UARTPin;
	UARTPin.pGPIOx = GPIOA;
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <UART_Initialization+0x40>)
 8001614:	607b      	str	r3, [r7, #4]
	UARTPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALT;
 8001616:	2302      	movs	r3, #2
 8001618:	727b      	strb	r3, [r7, #9]
	UARTPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800161a:	2301      	movs	r3, #1
 800161c:	72fb      	strb	r3, [r7, #11]
	UARTPin.GPIO_PinConfig.GPIO_AltFunMode = 8;
 800161e:	2308      	movs	r3, #8
 8001620:	737b      	strb	r3, [r7, #13]
	UARTPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8001622:	2302      	movs	r3, #2
 8001624:	72bb      	strb	r3, [r7, #10]
	UARTPin.GPIO_PinConfig.GPIO_PinOpType = GPIO_OP_TYPE_PP;
 8001626:	2300      	movs	r3, #0
 8001628:	733b      	strb	r3, [r7, #12]
	UARTPin.GPIO_PinConfig.GPIO_PinNumber = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&UARTPin);
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff f9c7 	bl	80009c4 <GPIO_Init>
	UARTPin.GPIO_PinConfig.GPIO_PinNumber = 1;
 8001636:	2301      	movs	r3, #1
 8001638:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&UARTPin);
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff f9c1 	bl	80009c4 <GPIO_Init>
}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40020000 	.word	0x40020000

08001650 <main>:
int main(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioButton;
	UART_Initialization();
 8001656:	f7ff ffd9 	bl	800160c <UART_Initialization>
	memset(&GpioButton,0,sizeof(GpioButton));
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	220c      	movs	r2, #12
 800165e:	2100      	movs	r1, #0
 8001660:	4618      	mov	r0, r3
 8001662:	f000 f895 	bl	8001790 <memset>
	GpioButton.pGPIOx = GPIOD;
 8001666:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <main+0x94>)
 8001668:	607b      	str	r3, [r7, #4]
	GpioButton.GPIO_PinConfig = UserButton;
 800166a:	4a1f      	ldr	r2, [pc, #124]	; (80016e8 <main+0x98>)
 800166c:	f107 0308 	add.w	r3, r7, #8
 8001670:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001674:	6018      	str	r0, [r3, #0]
 8001676:	3304      	adds	r3, #4
 8001678:	8019      	strh	r1, [r3, #0]
	GPIO_PeriClockControl(GpioButton.pGPIOx,ENABLE);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2101      	movs	r1, #1
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fb36 	bl	8000cf0 <GPIO_PeriClockControl>
	GPIO_Init(&GpioButton);
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff f99c 	bl	80009c4 <GPIO_Init>
	GPIO_PriorityConfig(IRQ_NO_EXTI9_5,10);
 800168c:	210a      	movs	r1, #10
 800168e:	2017      	movs	r0, #23
 8001690:	f7ff fc1c 	bl	8000ecc <GPIO_PriorityConfig>
	GPIO_InteruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 8001694:	2101      	movs	r1, #1
 8001696:	2017      	movs	r0, #23
 8001698:	f7ff fc4e 	bl	8000f38 <GPIO_InteruptConfig>

	USART_handle.USARTx = UART4;
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <main+0x9c>)
 800169e:	4a14      	ldr	r2, [pc, #80]	; (80016f0 <main+0xa0>)
 80016a0:	601a      	str	r2, [r3, #0]
	USART_handle.UART_Config.BaudRate = 115200;
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <main+0x9c>)
 80016a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a8:	60da      	str	r2, [r3, #12]
	USART_handle.UART_Config.NumberOfStopBit = STOP_BIT_2;
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <main+0x9c>)
 80016ac:	2202      	movs	r2, #2
 80016ae:	721a      	strb	r2, [r3, #8]
	USART_handle.UART_Config.Parity = UART_PARITY_DISABLE;
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <main+0x9c>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	719a      	strb	r2, [r3, #6]
	USART_handle.UART_Config.WordLength = UART_WORD_LENGTH_8_BITS;
 80016b6:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <main+0x9c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	715a      	strb	r2, [r3, #5]
	USART_handle.TxState = UART_READY;
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <main+0x9c>)
 80016be:	2202      	movs	r2, #2
 80016c0:	755a      	strb	r2, [r3, #21]
	USART_InteruptConfig(UART4_IRQ_NUMBER,ENABLE);
 80016c2:	2101      	movs	r1, #1
 80016c4:	2034      	movs	r0, #52	; 0x34
 80016c6:	f7ff fef7 	bl	80014b8 <USART_InteruptConfig>
	USART_PriorityConfig(UART4_IRQ_NUMBER,UART4_DEFAULT_PRIORITY);
 80016ca:	213b      	movs	r1, #59	; 0x3b
 80016cc:	2034      	movs	r0, #52	; 0x34
 80016ce:	f7ff ff35 	bl	800153c <USART_PriorityConfig>
	USART_Init(&USART_handle);
 80016d2:	4806      	ldr	r0, [pc, #24]	; (80016ec <main+0x9c>)
 80016d4:	f7ff fdee 	bl	80012b4 <USART_Init>
	Control_USART(UART4,ENABLE);
 80016d8:	2101      	movs	r1, #1
 80016da:	4805      	ldr	r0, [pc, #20]	; (80016f0 <main+0xa0>)
 80016dc:	f7ff fcd0 	bl	8001080 <Control_USART>
	while(1)
 80016e0:	e7fe      	b.n	80016e0 <main+0x90>
 80016e2:	bf00      	nop
 80016e4:	40020c00 	.word	0x40020c00
 80016e8:	20000000 	.word	0x20000000
 80016ec:	20000034 	.word	0x20000034
 80016f0:	40004c00 	.word	0x40004c00

080016f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016f4:	480d      	ldr	r0, [pc, #52]	; (800172c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016fc:	480c      	ldr	r0, [pc, #48]	; (8001730 <LoopForever+0x6>)
  ldr r1, =_edata
 80016fe:	490d      	ldr	r1, [pc, #52]	; (8001734 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001700:	4a0d      	ldr	r2, [pc, #52]	; (8001738 <LoopForever+0xe>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001704:	e002      	b.n	800170c <LoopCopyDataInit>

08001706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170a:	3304      	adds	r3, #4

0800170c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800170c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001710:	d3f9      	bcc.n	8001706 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001714:	4c0a      	ldr	r4, [pc, #40]	; (8001740 <LoopForever+0x16>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001718:	e001      	b.n	800171e <LoopFillZerobss>

0800171a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800171c:	3204      	adds	r2, #4

0800171e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001720:	d3fb      	bcc.n	800171a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001722:	f000 f811 	bl	8001748 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001726:	f7ff ff93 	bl	8001650 <main>

0800172a <LoopForever>:

LoopForever:
    b LoopForever
 800172a:	e7fe      	b.n	800172a <LoopForever>
  ldr   r0, =_estack
 800172c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001734:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001738:	080017dc 	.word	0x080017dc
  ldr r2, =_sbss
 800173c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001740:	2000004c 	.word	0x2000004c

08001744 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001744:	e7fe      	b.n	8001744 <ADC_IRQHandler>
	...

08001748 <__libc_init_array>:
 8001748:	b570      	push	{r4, r5, r6, lr}
 800174a:	4d0d      	ldr	r5, [pc, #52]	; (8001780 <__libc_init_array+0x38>)
 800174c:	4c0d      	ldr	r4, [pc, #52]	; (8001784 <__libc_init_array+0x3c>)
 800174e:	1b64      	subs	r4, r4, r5
 8001750:	10a4      	asrs	r4, r4, #2
 8001752:	2600      	movs	r6, #0
 8001754:	42a6      	cmp	r6, r4
 8001756:	d109      	bne.n	800176c <__libc_init_array+0x24>
 8001758:	4d0b      	ldr	r5, [pc, #44]	; (8001788 <__libc_init_array+0x40>)
 800175a:	4c0c      	ldr	r4, [pc, #48]	; (800178c <__libc_init_array+0x44>)
 800175c:	f000 f820 	bl	80017a0 <_init>
 8001760:	1b64      	subs	r4, r4, r5
 8001762:	10a4      	asrs	r4, r4, #2
 8001764:	2600      	movs	r6, #0
 8001766:	42a6      	cmp	r6, r4
 8001768:	d105      	bne.n	8001776 <__libc_init_array+0x2e>
 800176a:	bd70      	pop	{r4, r5, r6, pc}
 800176c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001770:	4798      	blx	r3
 8001772:	3601      	adds	r6, #1
 8001774:	e7ee      	b.n	8001754 <__libc_init_array+0xc>
 8001776:	f855 3b04 	ldr.w	r3, [r5], #4
 800177a:	4798      	blx	r3
 800177c:	3601      	adds	r6, #1
 800177e:	e7f2      	b.n	8001766 <__libc_init_array+0x1e>
 8001780:	080017d4 	.word	0x080017d4
 8001784:	080017d4 	.word	0x080017d4
 8001788:	080017d4 	.word	0x080017d4
 800178c:	080017d8 	.word	0x080017d8

08001790 <memset>:
 8001790:	4402      	add	r2, r0
 8001792:	4603      	mov	r3, r0
 8001794:	4293      	cmp	r3, r2
 8001796:	d100      	bne.n	800179a <memset+0xa>
 8001798:	4770      	bx	lr
 800179a:	f803 1b01 	strb.w	r1, [r3], #1
 800179e:	e7f9      	b.n	8001794 <memset+0x4>

080017a0 <_init>:
 80017a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017a2:	bf00      	nop
 80017a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017a6:	bc08      	pop	{r3}
 80017a8:	469e      	mov	lr, r3
 80017aa:	4770      	bx	lr

080017ac <_fini>:
 80017ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ae:	bf00      	nop
 80017b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017b2:	bc08      	pop	{r3}
 80017b4:	469e      	mov	lr, r3
 80017b6:	4770      	bx	lr
