
DatProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d28  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000ed0  08000ed0  00010ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000eec  08000eec  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08000eec  08000eec  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000eec  08000eec  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000eec  08000eec  00010eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ef0  08000ef0  00010ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000040  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000058  20000058  00020018  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001a5c  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000534  00000000  00000000  00021a9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d8  00000000  00000000  00021fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001a0  00000000  00000000  000221b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000023d4  00000000  00000000  00022350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000019f6  00000000  00000000  00024724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009996  00000000  00000000  0002611a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002fab0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000071c  00000000  00000000  0002fb00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000018 	.word	0x20000018
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000eb8 	.word	0x08000eb8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000001c 	.word	0x2000001c
 80001e4:	08000eb8 	.word	0x08000eb8

080001e8 <GPIO_Init>:
 *
 * @Note            - None
 *
*/
void GPIO_Init(GPIO_Handle_t *pGPIO)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b086      	sub	sp, #24
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
    uint32_t tempReg;
    /* config the mode of the pin */
    /*enable clock for GPIOx*/
    GPIO_PeriClockControl(pGPIO->pGPIOx,ENABLE);
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	2101      	movs	r1, #1
 80001f6:	4618      	mov	r0, r3
 80001f8:	f000 f98c 	bl	8000514 <GPIO_PeriClockControl>
    if(pGPIO->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	795b      	ldrb	r3, [r3, #5]
 8000200:	2b03      	cmp	r3, #3
 8000202:	d81a      	bhi.n	800023a <GPIO_Init+0x52>
    {
        tempReg = pGPIO->pGPIOx->MODER & ~(3 << pGPIO->GPIO_PinConfig.GPIO_PinNumber * 2);
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	687a      	ldr	r2, [r7, #4]
 800020c:	7912      	ldrb	r2, [r2, #4]
 800020e:	0052      	lsls	r2, r2, #1
 8000210:	2103      	movs	r1, #3
 8000212:	fa01 f202 	lsl.w	r2, r1, r2
 8000216:	43d2      	mvns	r2, r2
 8000218:	4013      	ands	r3, r2
 800021a:	613b      	str	r3, [r7, #16]
        pGPIO->pGPIOx->MODER = tempReg | (pGPIO->GPIO_PinConfig.GPIO_PinMode << pGPIO->GPIO_PinConfig.GPIO_PinNumber * 2);
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	795b      	ldrb	r3, [r3, #5]
 8000220:	461a      	mov	r2, r3
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	791b      	ldrb	r3, [r3, #4]
 8000226:	005b      	lsls	r3, r3, #1
 8000228:	fa02 f303 	lsl.w	r3, r2, r3
 800022c:	4619      	mov	r1, r3
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	693a      	ldr	r2, [r7, #16]
 8000234:	430a      	orrs	r2, r1
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	e0b6      	b.n	80003a8 <GPIO_Init+0x1c0>
    else
    {
    	/*Init clock for EXTI and SYSCFG peripherals*/
    	//EXTI_CLK_ENB();
        /* Configuration of EXTI peripheral */
        if(pGPIO->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	795b      	ldrb	r3, [r3, #5]
 800023e:	2b04      	cmp	r3, #4
 8000240:	d117      	bne.n	8000272 <GPIO_Init+0x8a>
        {
            /* config the FTRS register */
            EXTI->FTSR |= (1 << pGPIO->GPIO_PinConfig.GPIO_PinNumber);
 8000242:	4b97      	ldr	r3, [pc, #604]	; (80004a0 <GPIO_Init+0x2b8>)
 8000244:	68db      	ldr	r3, [r3, #12]
 8000246:	687a      	ldr	r2, [r7, #4]
 8000248:	7912      	ldrb	r2, [r2, #4]
 800024a:	4611      	mov	r1, r2
 800024c:	2201      	movs	r2, #1
 800024e:	408a      	lsls	r2, r1
 8000250:	4611      	mov	r1, r2
 8000252:	4a93      	ldr	r2, [pc, #588]	; (80004a0 <GPIO_Init+0x2b8>)
 8000254:	430b      	orrs	r3, r1
 8000256:	60d3      	str	r3, [r2, #12]
            EXTI->RTSR &= ~(1 << pGPIO->GPIO_PinConfig.GPIO_PinNumber);
 8000258:	4b91      	ldr	r3, [pc, #580]	; (80004a0 <GPIO_Init+0x2b8>)
 800025a:	689b      	ldr	r3, [r3, #8]
 800025c:	687a      	ldr	r2, [r7, #4]
 800025e:	7912      	ldrb	r2, [r2, #4]
 8000260:	4611      	mov	r1, r2
 8000262:	2201      	movs	r2, #1
 8000264:	408a      	lsls	r2, r1
 8000266:	43d2      	mvns	r2, r2
 8000268:	4611      	mov	r1, r2
 800026a:	4a8d      	ldr	r2, [pc, #564]	; (80004a0 <GPIO_Init+0x2b8>)
 800026c:	400b      	ands	r3, r1
 800026e:	6093      	str	r3, [r2, #8]
 8000270:	e035      	b.n	80002de <GPIO_Init+0xf6>

        }
        else if(pGPIO->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	795b      	ldrb	r3, [r3, #5]
 8000276:	2b05      	cmp	r3, #5
 8000278:	d117      	bne.n	80002aa <GPIO_Init+0xc2>
        {
            /* config the RTRS register */
            EXTI->RTSR |= (1 << pGPIO->GPIO_PinConfig.GPIO_PinNumber);
 800027a:	4b89      	ldr	r3, [pc, #548]	; (80004a0 <GPIO_Init+0x2b8>)
 800027c:	689b      	ldr	r3, [r3, #8]
 800027e:	687a      	ldr	r2, [r7, #4]
 8000280:	7912      	ldrb	r2, [r2, #4]
 8000282:	4611      	mov	r1, r2
 8000284:	2201      	movs	r2, #1
 8000286:	408a      	lsls	r2, r1
 8000288:	4611      	mov	r1, r2
 800028a:	4a85      	ldr	r2, [pc, #532]	; (80004a0 <GPIO_Init+0x2b8>)
 800028c:	430b      	orrs	r3, r1
 800028e:	6093      	str	r3, [r2, #8]
            EXTI->FTSR &= ~(1 << pGPIO->GPIO_PinConfig.GPIO_PinNumber);
 8000290:	4b83      	ldr	r3, [pc, #524]	; (80004a0 <GPIO_Init+0x2b8>)
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	687a      	ldr	r2, [r7, #4]
 8000296:	7912      	ldrb	r2, [r2, #4]
 8000298:	4611      	mov	r1, r2
 800029a:	2201      	movs	r2, #1
 800029c:	408a      	lsls	r2, r1
 800029e:	43d2      	mvns	r2, r2
 80002a0:	4611      	mov	r1, r2
 80002a2:	4a7f      	ldr	r2, [pc, #508]	; (80004a0 <GPIO_Init+0x2b8>)
 80002a4:	400b      	ands	r3, r1
 80002a6:	60d3      	str	r3, [r2, #12]
 80002a8:	e019      	b.n	80002de <GPIO_Init+0xf6>
        }
        else if (pGPIO->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	795b      	ldrb	r3, [r3, #5]
 80002ae:	2b06      	cmp	r3, #6
 80002b0:	d115      	bne.n	80002de <GPIO_Init+0xf6>
        {
            /* config both RTRS and FRRS */
            EXTI->FTSR |= (1 << pGPIO->GPIO_PinConfig.GPIO_PinNumber);
 80002b2:	4b7b      	ldr	r3, [pc, #492]	; (80004a0 <GPIO_Init+0x2b8>)
 80002b4:	68db      	ldr	r3, [r3, #12]
 80002b6:	687a      	ldr	r2, [r7, #4]
 80002b8:	7912      	ldrb	r2, [r2, #4]
 80002ba:	4611      	mov	r1, r2
 80002bc:	2201      	movs	r2, #1
 80002be:	408a      	lsls	r2, r1
 80002c0:	4611      	mov	r1, r2
 80002c2:	4a77      	ldr	r2, [pc, #476]	; (80004a0 <GPIO_Init+0x2b8>)
 80002c4:	430b      	orrs	r3, r1
 80002c6:	60d3      	str	r3, [r2, #12]
            EXTI->RTSR |= (1 << pGPIO->GPIO_PinConfig.GPIO_PinNumber);
 80002c8:	4b75      	ldr	r3, [pc, #468]	; (80004a0 <GPIO_Init+0x2b8>)
 80002ca:	689b      	ldr	r3, [r3, #8]
 80002cc:	687a      	ldr	r2, [r7, #4]
 80002ce:	7912      	ldrb	r2, [r2, #4]
 80002d0:	4611      	mov	r1, r2
 80002d2:	2201      	movs	r2, #1
 80002d4:	408a      	lsls	r2, r1
 80002d6:	4611      	mov	r1, r2
 80002d8:	4a71      	ldr	r2, [pc, #452]	; (80004a0 <GPIO_Init+0x2b8>)
 80002da:	430b      	orrs	r3, r1
 80002dc:	6093      	str	r3, [r2, #8]
        }

        /* config interupt mask register from EXTI side
         * this register allows interupt to be deliveried to NVIC controller */
        EXTI->IMR |= (1 << pGPIO->GPIO_PinConfig.GPIO_PinNumber);
 80002de:	4b70      	ldr	r3, [pc, #448]	; (80004a0 <GPIO_Init+0x2b8>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	687a      	ldr	r2, [r7, #4]
 80002e4:	7912      	ldrb	r2, [r2, #4]
 80002e6:	4611      	mov	r1, r2
 80002e8:	2201      	movs	r2, #1
 80002ea:	408a      	lsls	r2, r1
 80002ec:	4611      	mov	r1, r2
 80002ee:	4a6c      	ldr	r2, [pc, #432]	; (80004a0 <GPIO_Init+0x2b8>)
 80002f0:	430b      	orrs	r3, r1
 80002f2:	6013      	str	r3, [r2, #0]


        /* Configuration of SYSFG peripherals */

        /* config GPIO port selection in SYSCFG_EXTICR */
        uint8_t temp1 = pGPIO->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	791b      	ldrb	r3, [r3, #4]
 80002f8:	089b      	lsrs	r3, r3, #2
 80002fa:	75fb      	strb	r3, [r7, #23]
        		uint8_t temp2 = pGPIO->GPIO_PinConfig.GPIO_PinNumber % 4;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	791b      	ldrb	r3, [r3, #4]
 8000300:	f003 0303 	and.w	r3, r3, #3
 8000304:	75bb      	strb	r3, [r7, #22]
        		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIO->pGPIOx);
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4a66      	ldr	r2, [pc, #408]	; (80004a4 <GPIO_Init+0x2bc>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d039      	beq.n	8000384 <GPIO_Init+0x19c>
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a64      	ldr	r2, [pc, #400]	; (80004a8 <GPIO_Init+0x2c0>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d032      	beq.n	8000380 <GPIO_Init+0x198>
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a63      	ldr	r2, [pc, #396]	; (80004ac <GPIO_Init+0x2c4>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d02b      	beq.n	800037c <GPIO_Init+0x194>
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a61      	ldr	r2, [pc, #388]	; (80004b0 <GPIO_Init+0x2c8>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d024      	beq.n	8000378 <GPIO_Init+0x190>
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4a60      	ldr	r2, [pc, #384]	; (80004b4 <GPIO_Init+0x2cc>)
 8000334:	4293      	cmp	r3, r2
 8000336:	d01d      	beq.n	8000374 <GPIO_Init+0x18c>
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a5e      	ldr	r2, [pc, #376]	; (80004b8 <GPIO_Init+0x2d0>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d016      	beq.n	8000370 <GPIO_Init+0x188>
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4a5d      	ldr	r2, [pc, #372]	; (80004bc <GPIO_Init+0x2d4>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d00f      	beq.n	800036c <GPIO_Init+0x184>
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a5b      	ldr	r2, [pc, #364]	; (80004c0 <GPIO_Init+0x2d8>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d008      	beq.n	8000368 <GPIO_Init+0x180>
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a5a      	ldr	r2, [pc, #360]	; (80004c4 <GPIO_Init+0x2dc>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d101      	bne.n	8000364 <GPIO_Init+0x17c>
 8000360:	2308      	movs	r3, #8
 8000362:	e010      	b.n	8000386 <GPIO_Init+0x19e>
 8000364:	2300      	movs	r3, #0
 8000366:	e00e      	b.n	8000386 <GPIO_Init+0x19e>
 8000368:	2307      	movs	r3, #7
 800036a:	e00c      	b.n	8000386 <GPIO_Init+0x19e>
 800036c:	2306      	movs	r3, #6
 800036e:	e00a      	b.n	8000386 <GPIO_Init+0x19e>
 8000370:	2305      	movs	r3, #5
 8000372:	e008      	b.n	8000386 <GPIO_Init+0x19e>
 8000374:	2304      	movs	r3, #4
 8000376:	e006      	b.n	8000386 <GPIO_Init+0x19e>
 8000378:	2303      	movs	r3, #3
 800037a:	e004      	b.n	8000386 <GPIO_Init+0x19e>
 800037c:	2302      	movs	r3, #2
 800037e:	e002      	b.n	8000386 <GPIO_Init+0x19e>
 8000380:	2301      	movs	r3, #1
 8000382:	e000      	b.n	8000386 <GPIO_Init+0x19e>
 8000384:	2300      	movs	r3, #0
 8000386:	757b      	strb	r3, [r7, #21]
        		SYSCFG_PCLK_EN();
 8000388:	4b4f      	ldr	r3, [pc, #316]	; (80004c8 <GPIO_Init+0x2e0>)
 800038a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800038c:	4a4e      	ldr	r2, [pc, #312]	; (80004c8 <GPIO_Init+0x2e0>)
 800038e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000392:	6453      	str	r3, [r2, #68]	; 0x44
        		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000394:	7d7a      	ldrb	r2, [r7, #21]
 8000396:	7dbb      	ldrb	r3, [r7, #22]
 8000398:	009b      	lsls	r3, r3, #2
 800039a:	fa02 f103 	lsl.w	r1, r2, r3
 800039e:	4a4b      	ldr	r2, [pc, #300]	; (80004cc <GPIO_Init+0x2e4>)
 80003a0:	7dfb      	ldrb	r3, [r7, #23]
 80003a2:	3302      	adds	r3, #2
 80003a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        /* End of configuration of SYSFG peripherals */
    }
    /* config speed */
    tempReg = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	613b      	str	r3, [r7, #16]
    tempReg = pGPIO->pGPIOx->OSPEEDR & ~(0x3 << pGPIO->GPIO_PinConfig.GPIO_PinNumber * 2); /* 2 bits need to be deleted */
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	687a      	ldr	r2, [r7, #4]
 80003b4:	7912      	ldrb	r2, [r2, #4]
 80003b6:	0052      	lsls	r2, r2, #1
 80003b8:	2103      	movs	r1, #3
 80003ba:	fa01 f202 	lsl.w	r2, r1, r2
 80003be:	43d2      	mvns	r2, r2
 80003c0:	4013      	ands	r3, r2
 80003c2:	613b      	str	r3, [r7, #16]
    pGPIO->pGPIOx->OSPEEDR = tempReg | (pGPIO->GPIO_PinConfig.GPIO_PinSpeed << pGPIO->GPIO_PinConfig.GPIO_PinNumber * 2);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	799b      	ldrb	r3, [r3, #6]
 80003c8:	461a      	mov	r2, r3
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	791b      	ldrb	r3, [r3, #4]
 80003ce:	005b      	lsls	r3, r3, #1
 80003d0:	fa02 f303 	lsl.w	r3, r2, r3
 80003d4:	4619      	mov	r1, r3
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	693a      	ldr	r2, [r7, #16]
 80003dc:	430a      	orrs	r2, r1
 80003de:	609a      	str	r2, [r3, #8]
    /* config pupd  */
    tempReg = 0;
 80003e0:	2300      	movs	r3, #0
 80003e2:	613b      	str	r3, [r7, #16]
    tempReg = pGPIO->pGPIOx->PUPDR & ~(0x3 << pGPIO->GPIO_PinConfig.GPIO_PinNumber * 2); /* 2 bits need to be deleted */
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	68db      	ldr	r3, [r3, #12]
 80003ea:	687a      	ldr	r2, [r7, #4]
 80003ec:	7912      	ldrb	r2, [r2, #4]
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	2103      	movs	r1, #3
 80003f2:	fa01 f202 	lsl.w	r2, r1, r2
 80003f6:	43d2      	mvns	r2, r2
 80003f8:	4013      	ands	r3, r2
 80003fa:	613b      	str	r3, [r7, #16]
    pGPIO->pGPIOx->PUPDR = tempReg | (pGPIO->GPIO_PinConfig.GPIO_PinPuPdControl << pGPIO->GPIO_PinConfig.GPIO_PinNumber * 2);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	79db      	ldrb	r3, [r3, #7]
 8000400:	461a      	mov	r2, r3
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	791b      	ldrb	r3, [r3, #4]
 8000406:	005b      	lsls	r3, r3, #1
 8000408:	fa02 f303 	lsl.w	r3, r2, r3
 800040c:	4619      	mov	r1, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	693a      	ldr	r2, [r7, #16]
 8000414:	430a      	orrs	r2, r1
 8000416:	60da      	str	r2, [r3, #12]

    /*OUTPUT type*/
    if(pGPIO->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	795b      	ldrb	r3, [r3, #5]
 800041c:	2b01      	cmp	r3, #1
 800041e:	d119      	bne.n	8000454 <GPIO_Init+0x26c>
    {
		tempReg = 0;
 8000420:	2300      	movs	r3, #0
 8000422:	613b      	str	r3, [r7, #16]
		tempReg = pGPIO->pGPIOx->OTYPER & ~(0x1 << pGPIO->GPIO_PinConfig.GPIO_PinNumber); /* 1 bit need to be deleted */
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	7912      	ldrb	r2, [r2, #4]
 800042e:	4611      	mov	r1, r2
 8000430:	2201      	movs	r2, #1
 8000432:	408a      	lsls	r2, r1
 8000434:	43d2      	mvns	r2, r2
 8000436:	4013      	ands	r3, r2
 8000438:	613b      	str	r3, [r7, #16]
		pGPIO->pGPIOx->OTYPER = tempReg | (pGPIO->GPIO_PinConfig.GPIO_PinOpType << pGPIO->GPIO_PinConfig.GPIO_PinNumber);
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	7a1b      	ldrb	r3, [r3, #8]
 800043e:	461a      	mov	r2, r3
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	791b      	ldrb	r3, [r3, #4]
 8000444:	fa02 f303 	lsl.w	r3, r2, r3
 8000448:	4619      	mov	r1, r3
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	693a      	ldr	r2, [r7, #16]
 8000450:	430a      	orrs	r2, r1
 8000452:	605a      	str	r2, [r3, #4]
    }

    /* Alternate function */
    if(pGPIO->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	795b      	ldrb	r3, [r3, #5]
 8000458:	2b02      	cmp	r3, #2
 800045a:	d157      	bne.n	800050c <GPIO_Init+0x324>
    {
        tempReg = 0;
 800045c:	2300      	movs	r3, #0
 800045e:	613b      	str	r3, [r7, #16]
        if(pGPIO->GPIO_PinConfig.GPIO_PinNumber < 8)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	791b      	ldrb	r3, [r3, #4]
 8000464:	2b07      	cmp	r3, #7
 8000466:	d833      	bhi.n	80004d0 <GPIO_Init+0x2e8>
        {
            tempReg = pGPIO->pGPIOx->AFR[1] & ~(0xF << pGPIO->GPIO_PinConfig.GPIO_PinNumber * 4);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	7912      	ldrb	r2, [r2, #4]
 8000472:	0092      	lsls	r2, r2, #2
 8000474:	210f      	movs	r1, #15
 8000476:	fa01 f202 	lsl.w	r2, r1, r2
 800047a:	43d2      	mvns	r2, r2
 800047c:	4013      	ands	r3, r2
 800047e:	613b      	str	r3, [r7, #16]
            pGPIO->pGPIOx->AFR[0] = tempReg | (pGPIO->GPIO_PinConfig.GPIO_AltFunMode << pGPIO->GPIO_PinConfig.GPIO_PinNumber * 4);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	7a5b      	ldrb	r3, [r3, #9]
 8000484:	461a      	mov	r2, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	791b      	ldrb	r3, [r3, #4]
 800048a:	009b      	lsls	r3, r3, #2
 800048c:	fa02 f303 	lsl.w	r3, r2, r3
 8000490:	4619      	mov	r1, r3
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	693a      	ldr	r2, [r7, #16]
 8000498:	430a      	orrs	r2, r1
 800049a:	621a      	str	r2, [r3, #32]
            uint8_t PinLocation = pGPIO->GPIO_PinConfig.GPIO_PinNumber % 8;
            tempReg = pGPIO->pGPIOx->AFR[1] & ~(0xF << PinLocation * 4); /* 4 bits need to be deleted */
            pGPIO->pGPIOx->AFR[1] = tempReg | (pGPIO->GPIO_PinConfig.GPIO_AltFunMode << PinLocation * 4);
        }
    }
    return;
 800049c:	e036      	b.n	800050c <GPIO_Init+0x324>
 800049e:	bf00      	nop
 80004a0:	40013c00 	.word	0x40013c00
 80004a4:	40020000 	.word	0x40020000
 80004a8:	40020400 	.word	0x40020400
 80004ac:	40020800 	.word	0x40020800
 80004b0:	40020c00 	.word	0x40020c00
 80004b4:	40021000 	.word	0x40021000
 80004b8:	40021400 	.word	0x40021400
 80004bc:	40021800 	.word	0x40021800
 80004c0:	40021c00 	.word	0x40021c00
 80004c4:	40022000 	.word	0x40022000
 80004c8:	40023800 	.word	0x40023800
 80004cc:	40013800 	.word	0x40013800
            uint8_t PinLocation = pGPIO->GPIO_PinConfig.GPIO_PinNumber % 8;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	791b      	ldrb	r3, [r3, #4]
 80004d4:	f003 0307 	and.w	r3, r3, #7
 80004d8:	73fb      	strb	r3, [r7, #15]
            tempReg = pGPIO->pGPIOx->AFR[1] & ~(0xF << PinLocation * 4); /* 4 bits need to be deleted */
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004e0:	7bfa      	ldrb	r2, [r7, #15]
 80004e2:	0092      	lsls	r2, r2, #2
 80004e4:	210f      	movs	r1, #15
 80004e6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ea:	43d2      	mvns	r2, r2
 80004ec:	4013      	ands	r3, r2
 80004ee:	613b      	str	r3, [r7, #16]
            pGPIO->pGPIOx->AFR[1] = tempReg | (pGPIO->GPIO_PinConfig.GPIO_AltFunMode << PinLocation * 4);
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	7a5b      	ldrb	r3, [r3, #9]
 80004f4:	461a      	mov	r2, r3
 80004f6:	7bfb      	ldrb	r3, [r7, #15]
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	fa02 f303 	lsl.w	r3, r2, r3
 80004fe:	4619      	mov	r1, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	693a      	ldr	r2, [r7, #16]
 8000506:	430a      	orrs	r2, r1
 8000508:	625a      	str	r2, [r3, #36]	; 0x24
    return;
 800050a:	bf00      	nop
 800050c:	bf00      	nop
}
 800050e:	3718      	adds	r7, #24
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <GPIO_PeriClockControl>:
 *
 * @Note            -
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx,uint8_t EnorDi)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	460b      	mov	r3, r1
 800051e:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE)
 8000520:	78fb      	ldrb	r3, [r7, #3]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d164      	bne.n	80005f0 <GPIO_PeriClockControl+0xdc>
    {
        if(pGPIOx == GPIOA)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4a66      	ldr	r2, [pc, #408]	; (80006c4 <GPIO_PeriClockControl+0x1b0>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d105      	bne.n	800053a <GPIO_PeriClockControl+0x26>
        {
            GPIOA_PCLK_EN();
 800052e:	4b66      	ldr	r3, [pc, #408]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a65      	ldr	r2, [pc, #404]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
        }
        if(pGPIOx == GPIOB)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4a63      	ldr	r2, [pc, #396]	; (80006cc <GPIO_PeriClockControl+0x1b8>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d105      	bne.n	800054e <GPIO_PeriClockControl+0x3a>
        {
            GPIOB_PCLK_EN();
 8000542:	4b61      	ldr	r3, [pc, #388]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a60      	ldr	r2, [pc, #384]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 8000548:	f043 0302 	orr.w	r3, r3, #2
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
        }
        if(pGPIOx == GPIOC)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4a5f      	ldr	r2, [pc, #380]	; (80006d0 <GPIO_PeriClockControl+0x1bc>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d105      	bne.n	8000562 <GPIO_PeriClockControl+0x4e>
        {
            GPIOC_PCLK_EN();
 8000556:	4b5c      	ldr	r3, [pc, #368]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a5b      	ldr	r2, [pc, #364]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 800055c:	f043 0304 	orr.w	r3, r3, #4
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
        }
        if(pGPIOx == GPIOD)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4a5b      	ldr	r2, [pc, #364]	; (80006d4 <GPIO_PeriClockControl+0x1c0>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d105      	bne.n	8000576 <GPIO_PeriClockControl+0x62>
        {
            GPIOD_PCLK_EN();
 800056a:	4b57      	ldr	r3, [pc, #348]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a56      	ldr	r2, [pc, #344]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 8000570:	f043 0308 	orr.w	r3, r3, #8
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
        }
        if(pGPIOx == GPIOE)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4a57      	ldr	r2, [pc, #348]	; (80006d8 <GPIO_PeriClockControl+0x1c4>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d105      	bne.n	800058a <GPIO_PeriClockControl+0x76>
        {
            GPIOE_PCLK_EN();
 800057e:	4b52      	ldr	r3, [pc, #328]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	4a51      	ldr	r2, [pc, #324]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 8000584:	f043 0310 	orr.w	r3, r3, #16
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
        }
        if(pGPIOx == GPIOF)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a53      	ldr	r2, [pc, #332]	; (80006dc <GPIO_PeriClockControl+0x1c8>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d105      	bne.n	800059e <GPIO_PeriClockControl+0x8a>
        {
            GPIOF_PCLK_EN();
 8000592:	4b4d      	ldr	r3, [pc, #308]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a4c      	ldr	r2, [pc, #304]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 8000598:	f043 0320 	orr.w	r3, r3, #32
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
        }
        if(pGPIOx == GPIOG)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4a4f      	ldr	r2, [pc, #316]	; (80006e0 <GPIO_PeriClockControl+0x1cc>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d105      	bne.n	80005b2 <GPIO_PeriClockControl+0x9e>
        {
            GPIOG_PCLK_EN();
 80005a6:	4b48      	ldr	r3, [pc, #288]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a47      	ldr	r2, [pc, #284]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 80005ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
        }
        if(pGPIOx == GPIOH)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a4b      	ldr	r2, [pc, #300]	; (80006e4 <GPIO_PeriClockControl+0x1d0>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d105      	bne.n	80005c6 <GPIO_PeriClockControl+0xb2>
        {
            GPIOH_PCLK_EN();
 80005ba:	4b43      	ldr	r3, [pc, #268]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a42      	ldr	r2, [pc, #264]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 80005c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
        }
        if(pGPIOx == GPIOI)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4a47      	ldr	r2, [pc, #284]	; (80006e8 <GPIO_PeriClockControl+0x1d4>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d105      	bne.n	80005da <GPIO_PeriClockControl+0xc6>
        {
            GPIOI_PCLK_EN();
 80005ce:	4b3e      	ldr	r3, [pc, #248]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a3d      	ldr	r2, [pc, #244]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 80005d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
        }
        if(pGPIOx == GPIOJ)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a43      	ldr	r2, [pc, #268]	; (80006ec <GPIO_PeriClockControl+0x1d8>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d16a      	bne.n	80006b8 <GPIO_PeriClockControl+0x1a4>
        {
            GPIOJ_PCLK_EN();
 80005e2:	4b39      	ldr	r3, [pc, #228]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a38      	ldr	r2, [pc, #224]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 80005e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
        if(pGPIOx == GPIOJ)
        {
            GPIOJ_PCLK_DI();
        }
    }
}
 80005ee:	e063      	b.n	80006b8 <GPIO_PeriClockControl+0x1a4>
        if(pGPIOx == GPIOA)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a34      	ldr	r2, [pc, #208]	; (80006c4 <GPIO_PeriClockControl+0x1b0>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d105      	bne.n	8000604 <GPIO_PeriClockControl+0xf0>
            GPIOA_PCLK_DI();
 80005f8:	4b33      	ldr	r3, [pc, #204]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 80005fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fc:	4a32      	ldr	r2, [pc, #200]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 80005fe:	f023 0301 	bic.w	r3, r3, #1
 8000602:	6313      	str	r3, [r2, #48]	; 0x30
        if(pGPIOx == GPIOB)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4a31      	ldr	r2, [pc, #196]	; (80006cc <GPIO_PeriClockControl+0x1b8>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d105      	bne.n	8000618 <GPIO_PeriClockControl+0x104>
            GPIOB_PCLK_DI();
 800060c:	4b2e      	ldr	r3, [pc, #184]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 800060e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000610:	4a2d      	ldr	r2, [pc, #180]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 8000612:	f023 0302 	bic.w	r3, r3, #2
 8000616:	6313      	str	r3, [r2, #48]	; 0x30
        if(pGPIOx == GPIOC)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a2d      	ldr	r2, [pc, #180]	; (80006d0 <GPIO_PeriClockControl+0x1bc>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d105      	bne.n	800062c <GPIO_PeriClockControl+0x118>
            GPIOC_PCLK_DI();
 8000620:	4b29      	ldr	r3, [pc, #164]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000624:	4a28      	ldr	r2, [pc, #160]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 8000626:	f023 0304 	bic.w	r3, r3, #4
 800062a:	6313      	str	r3, [r2, #48]	; 0x30
        if(pGPIOx == GPIOD)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4a29      	ldr	r2, [pc, #164]	; (80006d4 <GPIO_PeriClockControl+0x1c0>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d105      	bne.n	8000640 <GPIO_PeriClockControl+0x12c>
            GPIOD_PCLK_DI();
 8000634:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 8000636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000638:	4a23      	ldr	r2, [pc, #140]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 800063a:	f023 0308 	bic.w	r3, r3, #8
 800063e:	6313      	str	r3, [r2, #48]	; 0x30
        if(pGPIOx == GPIOE)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4a25      	ldr	r2, [pc, #148]	; (80006d8 <GPIO_PeriClockControl+0x1c4>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d105      	bne.n	8000654 <GPIO_PeriClockControl+0x140>
            GPIOE_PCLK_DI();
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 800064a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064c:	4a1e      	ldr	r2, [pc, #120]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 800064e:	f023 0310 	bic.w	r3, r3, #16
 8000652:	6313      	str	r3, [r2, #48]	; 0x30
        if(pGPIOx == GPIOF)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4a21      	ldr	r2, [pc, #132]	; (80006dc <GPIO_PeriClockControl+0x1c8>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d105      	bne.n	8000668 <GPIO_PeriClockControl+0x154>
            GPIOF_PCLK_DI();
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 800065e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000660:	4a19      	ldr	r2, [pc, #100]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 8000662:	f023 0320 	bic.w	r3, r3, #32
 8000666:	6313      	str	r3, [r2, #48]	; 0x30
        if(pGPIOx == GPIOG)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a1d      	ldr	r2, [pc, #116]	; (80006e0 <GPIO_PeriClockControl+0x1cc>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d105      	bne.n	800067c <GPIO_PeriClockControl+0x168>
            GPIOG_PCLK_DI();
 8000670:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 8000672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000674:	4a14      	ldr	r2, [pc, #80]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 8000676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800067a:	6313      	str	r3, [r2, #48]	; 0x30
        if(pGPIOx == GPIOH)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4a19      	ldr	r2, [pc, #100]	; (80006e4 <GPIO_PeriClockControl+0x1d0>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d105      	bne.n	8000690 <GPIO_PeriClockControl+0x17c>
            GPIOH_PCLK_DI();
 8000684:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 8000686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000688:	4a0f      	ldr	r2, [pc, #60]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 800068a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800068e:	6313      	str	r3, [r2, #48]	; 0x30
        if(pGPIOx == GPIOI)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4a15      	ldr	r2, [pc, #84]	; (80006e8 <GPIO_PeriClockControl+0x1d4>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d105      	bne.n	80006a4 <GPIO_PeriClockControl+0x190>
            GPIOI_PCLK_DI();
 8000698:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 800069a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069c:	4a0a      	ldr	r2, [pc, #40]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 800069e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006a2:	6313      	str	r3, [r2, #48]	; 0x30
        if(pGPIOx == GPIOJ)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4a11      	ldr	r2, [pc, #68]	; (80006ec <GPIO_PeriClockControl+0x1d8>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d105      	bne.n	80006b8 <GPIO_PeriClockControl+0x1a4>
            GPIOJ_PCLK_DI();
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 80006ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b0:	4a05      	ldr	r2, [pc, #20]	; (80006c8 <GPIO_PeriClockControl+0x1b4>)
 80006b2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80006b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	40020000 	.word	0x40020000
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020400 	.word	0x40020400
 80006d0:	40020800 	.word	0x40020800
 80006d4:	40020c00 	.word	0x40020c00
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40021400 	.word	0x40021400
 80006e0:	40021800 	.word	0x40021800
 80006e4:	40021c00 	.word	0x40021c00
 80006e8:	40022000 	.word	0x40022000
 80006ec:	40022400 	.word	0x40022400

080006f0 <GPIO_PriorityConfig>:
    /* another implementation for this function */
    pGPIOx->ODR ^= (1 << PinNum);
    return;
}
void GPIO_PriorityConfig(uint8_t IRQNumber, uint8_t Priority)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	460a      	mov	r2, r1
 80006fa:	71fb      	strb	r3, [r7, #7]
 80006fc:	4613      	mov	r3, r2
 80006fe:	71bb      	strb	r3, [r7, #6]
#if 1
    uint8_t RegLocation = IRQNumber / 4;
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	089b      	lsrs	r3, r3, #2
 8000704:	73fb      	strb	r3, [r7, #15]
    uint8_t FieldLocation = IRQNumber % 4 ;
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	f003 0303 	and.w	r3, r3, #3
 800070c:	73bb      	strb	r3, [r7, #14]
    uint8_t shift_amount = FieldLocation * 8 + 8 - IMPLEMENTED_BITS;
 800070e:	7bbb      	ldrb	r3, [r7, #14]
 8000710:	3301      	adds	r3, #1
 8000712:	b2db      	uxtb	r3, r3
 8000714:	00db      	lsls	r3, r3, #3
 8000716:	b2db      	uxtb	r3, r3
 8000718:	3b04      	subs	r3, #4
 800071a:	737b      	strb	r3, [r7, #13]
    uint32_t tempReg = NVIC->IPR[RegLocation] & ~(0xF << shift_amount);
 800071c:	4a0e      	ldr	r2, [pc, #56]	; (8000758 <GPIO_PriorityConfig+0x68>)
 800071e:	7bfb      	ldrb	r3, [r7, #15]
 8000720:	33c0      	adds	r3, #192	; 0xc0
 8000722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000726:	7b7a      	ldrb	r2, [r7, #13]
 8000728:	210f      	movs	r1, #15
 800072a:	fa01 f202 	lsl.w	r2, r1, r2
 800072e:	43d2      	mvns	r2, r2
 8000730:	4013      	ands	r3, r2
 8000732:	60bb      	str	r3, [r7, #8]
    NVIC->IPR[RegLocation] = tempReg | (Priority << shift_amount);
 8000734:	79ba      	ldrb	r2, [r7, #6]
 8000736:	7b7b      	ldrb	r3, [r7, #13]
 8000738:	fa02 f303 	lsl.w	r3, r2, r3
 800073c:	4618      	mov	r0, r3
 800073e:	4906      	ldr	r1, [pc, #24]	; (8000758 <GPIO_PriorityConfig+0x68>)
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	4302      	orrs	r2, r0
 8000746:	33c0      	adds	r3, #192	; 0xc0
 8000748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return;
 800074c:	bf00      	nop

	*(  NVIC_PR_BASE_ADDR + iprx  ) |=  ( Priority << shift_amount );
#endif


}
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000e100 	.word	0xe000e100

0800075c <GPIO_InteruptConfig>:
 *
 * @Note            -
 *
 */
void GPIO_InteruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	460a      	mov	r2, r1
 8000766:	71fb      	strb	r3, [r7, #7]
 8000768:	4613      	mov	r3, r2
 800076a:	71bb      	strb	r3, [r7, #6]
#if 1
    /* @NVIC_CONFIGURATION relation */
    uint8_t RegLocation = IRQNumber / 32;
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	095b      	lsrs	r3, r3, #5
 8000770:	73fb      	strb	r3, [r7, #15]
    uint8_t FieldLocation = IRQNumber % 32;
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	f003 031f 	and.w	r3, r3, #31
 8000778:	73bb      	strb	r3, [r7, #14]
    uint32_t tempReg;
    if(EnorDi == ENABLE)
 800077a:	79bb      	ldrb	r3, [r7, #6]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d116      	bne.n	80007ae <GPIO_InteruptConfig+0x52>
    {
        tempReg = NVIC->ISER[RegLocation] & ~(1 <<FieldLocation);
 8000780:	4a16      	ldr	r2, [pc, #88]	; (80007dc <GPIO_InteruptConfig+0x80>)
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000788:	7bba      	ldrb	r2, [r7, #14]
 800078a:	2101      	movs	r1, #1
 800078c:	fa01 f202 	lsl.w	r2, r1, r2
 8000790:	43d2      	mvns	r2, r2
 8000792:	4013      	ands	r3, r2
 8000794:	60bb      	str	r3, [r7, #8]
        NVIC->ISER[RegLocation] = tempReg | (ENABLE << FieldLocation);
 8000796:	7bbb      	ldrb	r3, [r7, #14]
 8000798:	2201      	movs	r2, #1
 800079a:	fa02 f303 	lsl.w	r3, r2, r3
 800079e:	4618      	mov	r0, r3
 80007a0:	490e      	ldr	r1, [pc, #56]	; (80007dc <GPIO_InteruptConfig+0x80>)
 80007a2:	7bfb      	ldrb	r3, [r7, #15]
 80007a4:	68ba      	ldr	r2, [r7, #8]
 80007a6:	4302      	orrs	r2, r0
 80007a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    else
    {
        tempReg = NVIC->ICER[RegLocation] & ~(1 <<FieldLocation);
        NVIC->ICER[RegLocation] = tempReg | (DISABLE << FieldLocation);
    }
    return;
 80007ac:	e012      	b.n	80007d4 <GPIO_InteruptConfig+0x78>
        tempReg = NVIC->ICER[RegLocation] & ~(1 <<FieldLocation);
 80007ae:	4a0b      	ldr	r2, [pc, #44]	; (80007dc <GPIO_InteruptConfig+0x80>)
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	3320      	adds	r3, #32
 80007b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b8:	7bba      	ldrb	r2, [r7, #14]
 80007ba:	2101      	movs	r1, #1
 80007bc:	fa01 f202 	lsl.w	r2, r1, r2
 80007c0:	43d2      	mvns	r2, r2
 80007c2:	4013      	ands	r3, r2
 80007c4:	60bb      	str	r3, [r7, #8]
        NVIC->ICER[RegLocation] = tempReg | (DISABLE << FieldLocation);
 80007c6:	4905      	ldr	r1, [pc, #20]	; (80007dc <GPIO_InteruptConfig+0x80>)
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	3320      	adds	r3, #32
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return;
 80007d2:	bf00      	nop
    			//program ICER2 register
    			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
    		}
        }
#endif
}
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	e000e100 	.word	0xe000e100

080007e0 <GPIO_IrqHandling>:
 *
 * @Note            -
 *
 */
void GPIO_IrqHandling(uint8_t PinNum)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	if(EXTI->PR & (1 << PinNum))
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <GPIO_IrqHandling+0x3c>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	79fa      	ldrb	r2, [r7, #7]
 80007f0:	2101      	movs	r1, #1
 80007f2:	fa01 f202 	lsl.w	r2, r1, r2
 80007f6:	4013      	ands	r3, r2
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d009      	beq.n	8000810 <GPIO_IrqHandling+0x30>
	{
		EXTI->PR |= (1 << PinNum);
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <GPIO_IrqHandling+0x3c>)
 80007fe:	695b      	ldr	r3, [r3, #20]
 8000800:	79fa      	ldrb	r2, [r7, #7]
 8000802:	2101      	movs	r1, #1
 8000804:	fa01 f202 	lsl.w	r2, r1, r2
 8000808:	4611      	mov	r1, r2
 800080a:	4a04      	ldr	r2, [pc, #16]	; (800081c <GPIO_IrqHandling+0x3c>)
 800080c:	430b      	orrs	r3, r1
 800080e:	6153      	str	r3, [r2, #20]
	}
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40013c00 	.word	0x40013c00

08000820 <I2CStop>:
static inline uint8_t I2C_Is_Full(I2C_RegDef_t *I2Cx)
{
	return (I2Cx->SR1 >> I2C_RXNE_BIT_POSITION);
}
static inline void I2CStop(I2C_RegDef_t *I2Cx)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	I2Cx->CR1 |= 1 << I2C_STOP_BIT_CONDITION;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	601a      	str	r2, [r3, #0]
	return;
 8000834:	bf00      	nop
}
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <I2C_GenerateStartCondition>:
static inline void I2CDisable(I2C_RegDef_t *I2Cx)
{
	I2Cx->CR1 &= ~(1 << 0);
}
static inline void I2C_GenerateStartCondition(I2C_RegDef_t *I2Cx)
{
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
	I2Cx->CR1 |= 1 << I2C_START_BIT_POSITION;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	601a      	str	r2, [r3, #0]
	return;
 8000852:	bf00      	nop
}
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr

0800085c <I2C_GetFlagStatus>:
static inline uint8_t I2C_GetFlagStatus(I2C_RegDef_t *I2Cx,uint8_t FlagName)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	460b      	mov	r3, r1
 8000866:	70fb      	strb	r3, [r7, #3]
	if(I2Cx->SR1 & FlagName)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	695a      	ldr	r2, [r3, #20]
 800086c:	78fb      	ldrb	r3, [r7, #3]
 800086e:	4013      	ands	r3, r2
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <I2C_GetFlagStatus+0x1c>
	{
		return FLAG_SET;
 8000874:	2301      	movs	r3, #1
 8000876:	e000      	b.n	800087a <I2C_GetFlagStatus+0x1e>
	}
	else
	{
		return FLAG_RESET;
 8000878:	2300      	movs	r3, #0
	}
}
 800087a:	4618      	mov	r0, r3
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr

08000884 <I2C_ExecuteAddressPhaseWrite>:
static inline void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *I2Cx,uint8_t SlaveAddress)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	460b      	mov	r3, r1
 800088e:	70fb      	strb	r3, [r7, #3]
	SlaveAddress = SlaveAddress << 1;
 8000890:	78fb      	ldrb	r3, [r7, #3]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	70fb      	strb	r3, [r7, #3]
	SlaveAddress &= ~(1 << 0);
 8000896:	78fb      	ldrb	r3, [r7, #3]
 8000898:	f023 0301 	bic.w	r3, r3, #1
 800089c:	70fb      	strb	r3, [r7, #3]
	I2Cx->DR = SlaveAddress;
 800089e:	78fa      	ldrb	r2, [r7, #3]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	611a      	str	r2, [r3, #16]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr

080008ae <I2C_ADDRClearFlag>:
	SlaveAddress = SlaveAddress << 1;
	SlaveAddress |= 1 << 0;
	I2Cx->DR = SlaveAddress;
}
static inline void I2C_ADDRClearFlag(I2C_RegDef_t *I2Cx)
{
 80008ae:	b480      	push	{r7}
 80008b0:	b085      	sub	sp, #20
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
	uint32_t dummy = I2Cx->SR1;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	60fb      	str	r3, [r7, #12]
	dummy = I2Cx->SR2;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	60fb      	str	r3, [r7, #12]
	(void)dummy;

}
 80008c2:	bf00      	nop
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr

080008cc <I2C_MasterSendData>:
	{
		I2Cx->CR1 &= ~(1 << I2C_ACK_BIT_POSITION);
	}
}
void I2C_MasterSendData(I2C_Handle_t *pHandle,uint8_t *buffer,uint8_t Len,uint8_t SlaveAddress)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	4611      	mov	r1, r2
 80008d8:	461a      	mov	r2, r3
 80008da:	460b      	mov	r3, r1
 80008dc:	71fb      	strb	r3, [r7, #7]
 80008de:	4613      	mov	r3, r2
 80008e0:	71bb      	strb	r3, [r7, #6]
	I2CStop(pHandle->I2Cx);
	I2CDisable(pHandle->I2Cx);
	#endif
	#if defined GUIDE
	//1 .generate start condition
	I2C_GenerateStartCondition(pHandle->I2Cx);
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff ffa9 	bl	800083e <I2C_GenerateStartCondition>
	//2 .waiting until start condition generation is done
	while(!I2C_GetFlagStatus(pHandle->I2Cx,I2C_FLAG_SB));
 80008ec:	bf00      	nop
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2101      	movs	r1, #1
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ffb1 	bl	800085c <I2C_GetFlagStatus>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d0f6      	beq.n	80008ee <I2C_MasterSendData+0x22>
	//3 .send address
	I2C_ExecuteAddressPhaseWrite(pHandle->I2Cx,SlaveAddress);
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	79ba      	ldrb	r2, [r7, #6]
 8000906:	4611      	mov	r1, r2
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ffbb 	bl	8000884 <I2C_ExecuteAddressPhaseWrite>
	/*4. waiting for ADDR flag is set */
	while( !  I2C_GetFlagStatus(pHandle->I2Cx,I2C_FLAG_ADDR));
 800090e:	bf00      	nop
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2102      	movs	r1, #2
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ffa0 	bl	800085c <I2C_GetFlagStatus>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d0f6      	beq.n	8000910 <I2C_MasterSendData+0x44>
	//5 clear ADDR flag.
	I2C_ADDRClearFlag(pHandle->I2Cx);
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff ffc1 	bl	80008ae <I2C_ADDRClearFlag>
	while(Len != EMPTY)
 800092c:	e014      	b.n	8000958 <I2C_MasterSendData+0x8c>
	{
		while(I2C_GetFlagStatus(pHandle->I2Cx,I2C_FLAG_TXE));
 800092e:	bf00      	nop
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2180      	movs	r1, #128	; 0x80
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff ff90 	bl	800085c <I2C_GetFlagStatus>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d1f6      	bne.n	8000930 <I2C_MasterSendData+0x64>
		pHandle->I2Cx->DR = *buffer;
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	781a      	ldrb	r2, [r3, #0]
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	611a      	str	r2, [r3, #16]
		buffer++;
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	3301      	adds	r3, #1
 8000950:	60bb      	str	r3, [r7, #8]
		Len--;
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	3b01      	subs	r3, #1
 8000956:	71fb      	strb	r3, [r7, #7]
	while(Len != EMPTY)
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1e7      	bne.n	800092e <I2C_MasterSendData+0x62>
	}
	while(I2C_GetFlagStatus(pHandle->I2Cx,I2C_FLAG_TXE));
 800095e:	bf00      	nop
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2180      	movs	r1, #128	; 0x80
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff ff78 	bl	800085c <I2C_GetFlagStatus>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d1f6      	bne.n	8000960 <I2C_MasterSendData+0x94>
	while(I2C_GetFlagStatus(pHandle->I2Cx,I2C_FLAG_BTF));
 8000972:	bf00      	nop
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2104      	movs	r1, #4
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff ff6e 	bl	800085c <I2C_GetFlagStatus>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d1f6      	bne.n	8000974 <I2C_MasterSendData+0xa8>
	I2CStop(pHandle->I2Cx);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff ff48 	bl	8000820 <I2CStop>
	#endif

}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <GetPLLClock>:
		I2C_ErrorInteruptEnable(pHandle->I2Cx);
	}
	return State;
}
static uint32_t GetPLLClock(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
	/* not implemented yet */
	return 0;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
	...

080009a8 <GetClock>:
static uint32_t GetClock(void)
{
 80009a8:	b5b0      	push	{r4, r5, r7, lr}
 80009aa:	b08c      	sub	sp, #48	; 0x30
 80009ac:	af00      	add	r7, sp, #0
	uint16_t AHB_ClockPre[]={2,4,8,16,32,64,128,256,512};
 80009ae:	4b36      	ldr	r3, [pc, #216]	; (8000a88 <GetClock+0xe0>)
 80009b0:	f107 040c 	add.w	r4, r7, #12
 80009b4:	461d      	mov	r5, r3
 80009b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ba:	682b      	ldr	r3, [r5, #0]
 80009bc:	8023      	strh	r3, [r4, #0]
	uint16_t APB1_ClockPre[]={2,4,8,16};
 80009be:	4a33      	ldr	r2, [pc, #204]	; (8000a8c <GetClock+0xe4>)
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009c6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t Clock,SystemClk;
	uint16_t AHBPre;
	uint16_t APB1Pre;
	uint8_t ClockSource;
	ClockSource = (RCC->CFGR >> 2) & (0x3);
 80009ca:	4b31      	ldr	r3, [pc, #196]	; (8000a90 <GetClock+0xe8>)
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	089b      	lsrs	r3, r3, #2
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	f003 0303 	and.w	r3, r3, #3
 80009d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(ClockSource == 0)
 80009da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d102      	bne.n	80009e8 <GetClock+0x40>
	{
		SystemClk = 16000000;
 80009e2:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <GetClock+0xec>)
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009e6:	e00d      	b.n	8000a04 <GetClock+0x5c>
	}
	else if(ClockSource == 1)
 80009e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d102      	bne.n	80009f6 <GetClock+0x4e>
	{
		SystemClk = 8000000;
 80009f0:	4b29      	ldr	r3, [pc, #164]	; (8000a98 <GetClock+0xf0>)
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009f4:	e006      	b.n	8000a04 <GetClock+0x5c>
	}
	else if(ClockSource == 2)
 80009f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	d102      	bne.n	8000a04 <GetClock+0x5c>
	{
		SystemClk = GetPLLClock();
 80009fe:	f7ff ffcb 	bl	8000998 <GetPLLClock>
 8000a02:	62f8      	str	r0, [r7, #44]	; 0x2c
	}
	int8_t temp =((RCC->CFGR >> 4)&(0xF)) - 8;
 8000a04:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <GetClock+0xe8>)
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	091b      	lsrs	r3, r3, #4
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	f003 030f 	and.w	r3, r3, #15
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	3b08      	subs	r3, #8
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(temp < 8)
 8000a1a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	dc02      	bgt.n	8000a28 <GetClock+0x80>
	{
		AHBPre = 1;
 8000a22:	2301      	movs	r3, #1
 8000a24:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000a26:	e007      	b.n	8000a38 <GetClock+0x90>
	}
	else
	{
		AHBPre = AHB_ClockPre[temp];
 8000a28:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	3330      	adds	r3, #48	; 0x30
 8000a30:	443b      	add	r3, r7
 8000a32:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8000a36:	857b      	strh	r3, [r7, #42]	; 0x2a
	}
	temp = ((RCC->CFGR >> 10)&(0x7)) - 4;
 8000a38:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <GetClock+0xe8>)
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	0a9b      	lsrs	r3, r3, #10
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	f003 0307 	and.w	r3, r3, #7
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	3b04      	subs	r3, #4
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(temp < 4)
 8000a4e:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8000a52:	2b03      	cmp	r3, #3
 8000a54:	dc02      	bgt.n	8000a5c <GetClock+0xb4>
	{
		APB1Pre = 1;
 8000a56:	2301      	movs	r3, #1
 8000a58:	853b      	strh	r3, [r7, #40]	; 0x28
 8000a5a:	e007      	b.n	8000a6c <GetClock+0xc4>
	}
	else
	{
		APB1Pre = APB1_ClockPre[temp];
 8000a5c:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	3330      	adds	r3, #48	; 0x30
 8000a64:	443b      	add	r3, r7
 8000a66:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8000a6a:	853b      	strh	r3, [r7, #40]	; 0x28
	}
	Clock = (SystemClk / AHBPre)/APB1Pre;
 8000a6c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000a6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a70:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7a:	623b      	str	r3, [r7, #32]
	return Clock;
 8000a7c:	6a3b      	ldr	r3, [r7, #32]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3730      	adds	r7, #48	; 0x30
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bdb0      	pop	{r4, r5, r7, pc}
 8000a86:	bf00      	nop
 8000a88:	08000ed0 	.word	0x08000ed0
 8000a8c:	08000ee4 	.word	0x08000ee4
 8000a90:	40023800 	.word	0x40023800
 8000a94:	00f42400 	.word	0x00f42400
 8000a98:	007a1200 	.word	0x007a1200

08000a9c <I2C_Init>:

void I2C_Init(I2C_Handle_t *I2C_Handle)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	/* enable I2C clock */
	uint32_t tempReg = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
	I2C_PeriClockControl(I2C_Handle->I2Cx,ENABLE);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2101      	movs	r1, #1
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f8a2 	bl	8000bf8 <I2C_PeriClockControl>
	if(I2C_Handle->I2C_Config.I2C_ACKControl == ENABLE)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	7a5b      	ldrb	r3, [r3, #9]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d108      	bne.n	8000ace <I2C_Init+0x32>
	{
		I2C_Handle->I2Cx->CR1 |= (1 << I2C_ACK_BIT_POSITION);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	e007      	b.n	8000ade <I2C_Init+0x42>
	}
	else
	{
		I2C_Handle->I2Cx->CR1 &= ~(1 << I2C_ACK_BIT_POSITION);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000adc:	601a      	str	r2, [r3, #0]
	}
	/* config FREQ  */
	tempReg = GetClock()/1000000U;
 8000ade:	f7ff ff63 	bl	80009a8 <GetClock>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	4a42      	ldr	r2, [pc, #264]	; (8000bf0 <I2C_Init+0x154>)
 8000ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aea:	0c9b      	lsrs	r3, r3, #18
 8000aec:	60fb      	str	r3, [r7, #12]
	I2C_Handle->I2Cx->CR2 = tempReg & 0x3F;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000af8:	605a      	str	r2, [r3, #4]
	/* config address */
	tempReg = I2C_Handle->I2C_Config.I2C_DeviceAddress << 1;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	7a1b      	ldrb	r3, [r3, #8]
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	60fb      	str	r3, [r7, #12]
	tempReg |= (1<<14);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b08:	60fb      	str	r3, [r7, #12]
	I2C_Handle->I2Cx->OAR1 = tempReg ;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	609a      	str	r2, [r3, #8]
	/* CCR calculation */
	uint16_t ccr_value = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	817b      	strh	r3, [r7, #10]
	tempReg = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
	if(I2C_Handle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	4a35      	ldr	r2, [pc, #212]	; (8000bf4 <I2C_Init+0x158>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d80f      	bhi.n	8000b44 <I2C_Init+0xa8>
	{
		/* in standard mode */
		ccr_value = GetClock() / (2 * I2C_Handle->I2C_Config.I2C_SCLSpeed);
 8000b24:	f7ff ff40 	bl	80009a8 <GetClock>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b34:	817b      	strh	r3, [r7, #10]
		tempReg |= (uint32_t)(ccr_value & (0xFFF));
 8000b36:	897b      	ldrh	r3, [r7, #10]
 8000b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	e02a      	b.n	8000b9a <I2C_Init+0xfe>
	}
	else
	{
		/* in fast mode */
		tempReg |= 1 << I2C_F_S_BIT_POSITION;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b4a:	60fb      	str	r3, [r7, #12]
		if(I2C_Handle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	7a9b      	ldrb	r3, [r3, #10]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d10b      	bne.n	8000b6c <I2C_Init+0xd0>
		{
			ccr_value = GetClock() / (3 * I2C_Handle->I2C_Config.I2C_SCLSpeed);
 8000b54:	f7ff ff28 	bl	80009a8 <GetClock>
 8000b58:	4601      	mov	r1, r0
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	685a      	ldr	r2, [r3, #4]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	4413      	add	r3, r2
 8000b64:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b68:	817b      	strh	r3, [r7, #10]
 8000b6a:	e010      	b.n	8000b8e <I2C_Init+0xf2>
		}
		else
		{
			tempReg |= 1 << I2C_DUTY_BIT_POSITION;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b72:	60fb      	str	r3, [r7, #12]
			ccr_value = GetClock() / (25 * I2C_Handle->I2C_Config.I2C_SCLSpeed);
 8000b74:	f7ff ff18 	bl	80009a8 <GetClock>
 8000b78:	4601      	mov	r1, r0
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	685a      	ldr	r2, [r3, #4]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	009a      	lsls	r2, r3, #2
 8000b86:	4413      	add	r3, r2
 8000b88:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b8c:	817b      	strh	r3, [r7, #10]
		}
		tempReg |= (uint32_t)(ccr_value & (0xFFF));
 8000b8e:	897b      	ldrh	r3, [r7, #10]
 8000b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b94:	68fa      	ldr	r2, [r7, #12]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
	}
	I2C_Handle->I2Cx->CCR = tempReg;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	61da      	str	r2, [r3, #28]
	/*t rise calculation*/
	if(I2C_Handle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <I2C_Init+0x158>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d809      	bhi.n	8000bc0 <I2C_Init+0x124>
	{
		/* in standard mode */
		tempReg = (GetClock() / 1000000) + 1;
 8000bac:	f7ff fefc 	bl	80009a8 <GetClock>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	4a0f      	ldr	r2, [pc, #60]	; (8000bf0 <I2C_Init+0x154>)
 8000bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb8:	0c9b      	lsrs	r3, r3, #18
 8000bba:	3301      	adds	r3, #1
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	e00c      	b.n	8000bda <I2C_Init+0x13e>
	}
	else
	{
		/* in fast mode */
		tempReg = ((GetClock() * 300) / 1000000) + 1;
 8000bc0:	f7ff fef2 	bl	80009a8 <GetClock>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000bca:	fb02 f303 	mul.w	r3, r2, r3
 8000bce:	4a08      	ldr	r2, [pc, #32]	; (8000bf0 <I2C_Init+0x154>)
 8000bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd4:	0c9b      	lsrs	r3, r3, #18
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
	}
	I2C_Handle->I2Cx->TRISE = tempReg & (0x3F);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000be4:	621a      	str	r2, [r3, #32]
}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	431bde83 	.word	0x431bde83
 8000bf4:	000186a0 	.word	0x000186a0

08000bf8 <I2C_PeriClockControl>:
void I2C_PeriClockControl(I2C_RegDef_t *I2Cx,uint8_t EnorDi)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE)
 8000c04:	78fb      	ldrb	r3, [r7, #3]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d11d      	bne.n	8000c46 <I2C_PeriClockControl+0x4e>
	{
	    if(I2Cx == I2C1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a21      	ldr	r2, [pc, #132]	; (8000c94 <I2C_PeriClockControl+0x9c>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d105      	bne.n	8000c1e <I2C_PeriClockControl+0x26>
	    {
        	I2C1_PCLK_EN();
 8000c12:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <I2C_PeriClockControl+0xa0>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	4a20      	ldr	r2, [pc, #128]	; (8000c98 <I2C_PeriClockControl+0xa0>)
 8000c18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c1c:	6413      	str	r3, [r2, #64]	; 0x40
        }
        if(I2Cx == I2C2)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a1e      	ldr	r2, [pc, #120]	; (8000c9c <I2C_PeriClockControl+0xa4>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d105      	bne.n	8000c32 <I2C_PeriClockControl+0x3a>
	    {
        	I2C2_PCLK_EN();
 8000c26:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <I2C_PeriClockControl+0xa0>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	4a1b      	ldr	r2, [pc, #108]	; (8000c98 <I2C_PeriClockControl+0xa0>)
 8000c2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c30:	6413      	str	r3, [r2, #64]	; 0x40
	    }
	    if(I2Cx == I2C3)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a1a      	ldr	r2, [pc, #104]	; (8000ca0 <I2C_PeriClockControl+0xa8>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d105      	bne.n	8000c46 <I2C_PeriClockControl+0x4e>
	    {
        	I2C3_PCLK_EN();
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <I2C_PeriClockControl+0xa0>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a16      	ldr	r2, [pc, #88]	; (8000c98 <I2C_PeriClockControl+0xa0>)
 8000c40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
        }
    }
    if(EnorDi == DISABLE)
 8000c46:	78fb      	ldrb	r3, [r7, #3]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d11e      	bne.n	8000c8a <I2C_PeriClockControl+0x92>
	{
	    if(I2Cx == I2C1)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a11      	ldr	r2, [pc, #68]	; (8000c94 <I2C_PeriClockControl+0x9c>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d105      	bne.n	8000c60 <I2C_PeriClockControl+0x68>
	    {
	        I2C1_PCLK_DI();
 8000c54:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <I2C_PeriClockControl+0xa0>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	4a0f      	ldr	r2, [pc, #60]	; (8000c98 <I2C_PeriClockControl+0xa0>)
 8000c5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000c5e:	6413      	str	r3, [r2, #64]	; 0x40
	    }
	    if(I2Cx == I2C2)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <I2C_PeriClockControl+0xa4>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d105      	bne.n	8000c74 <I2C_PeriClockControl+0x7c>
	    {
	        I2C2_PCLK_DI();
 8000c68:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <I2C_PeriClockControl+0xa0>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <I2C_PeriClockControl+0xa0>)
 8000c6e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000c72:	6413      	str	r3, [r2, #64]	; 0x40
	    }
	    if(I2Cx == I2C3)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <I2C_PeriClockControl+0xa8>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d106      	bne.n	8000c8a <I2C_PeriClockControl+0x92>
	    {
	        I2C3_PCLK_DI();
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <I2C_PeriClockControl+0xa0>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <I2C_PeriClockControl+0xa0>)
 8000c82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000c86:	6413      	str	r3, [r2, #64]	; 0x40
	    }
    }
    return;
 8000c88:	bf00      	nop
 8000c8a:	bf00      	nop
}
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	40005400 	.word	0x40005400
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40005800 	.word	0x40005800
 8000ca0:	40006000 	.word	0x40006000

08000ca4 <I2C_PeripheralControl>:
void I2C_PeripheralControl(I2C_RegDef_t *I2Cx,uint8_t EnorDi)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE)
 8000cb0:	78fb      	ldrb	r3, [r7, #3]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d106      	bne.n	8000cc4 <I2C_PeripheralControl+0x20>
	{
		I2Cx->CR1 |= 1 << PE_BIT_POSITION;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f043 0201 	orr.w	r2, r3, #1
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	601a      	str	r2, [r3, #0]
		return;
 8000cc2:	e006      	b.n	8000cd2 <I2C_PeripheralControl+0x2e>
	}
	else
	{
		I2Cx->CR1 &= ~(1 << PE_BIT_POSITION);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f023 0201 	bic.w	r2, r3, #1
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	601a      	str	r2, [r3, #0]
		return;
 8000cd0:	bf00      	nop
	}
}
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
	...

08000cdc <Delay>:
		.GPIO_PinSpeed = GPIO_SPEED_LOW,
		.GPIO_PinPuPdControl = GPIO_PIN_PU,
		.GPIO_AltFunMode = 0
};
void Delay(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
	for(int us = 0 ; us <= 500000 ; us++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	e002      	b.n	8000cee <Delay+0x12>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3301      	adds	r3, #1
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <Delay+0x28>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	ddf8      	ble.n	8000ce8 <Delay+0xc>
	{

	}
}
 8000cf6:	bf00      	nop
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	0007a120 	.word	0x0007a120

08000d08 <EXTI9_5_IRQHandler>:
I2C_Handle_t I2C_handle;
uint8_t buffer[] = "pham ngoc dat";
void EXTI9_5_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	Delay();
 8000d0c:	f7ff ffe6 	bl	8000cdc <Delay>
	GPIO_IrqHandling(5);
 8000d10:	2005      	movs	r0, #5
 8000d12:	f7ff fd65 	bl	80007e0 <GPIO_IrqHandling>
	I2C_MasterSendData(&I2C_handle,buffer,sizeof(buffer),30);
 8000d16:	231e      	movs	r3, #30
 8000d18:	220e      	movs	r2, #14
 8000d1a:	4903      	ldr	r1, [pc, #12]	; (8000d28 <EXTI9_5_IRQHandler+0x20>)
 8000d1c:	4803      	ldr	r0, [pc, #12]	; (8000d2c <EXTI9_5_IRQHandler+0x24>)
 8000d1e:	f7ff fdd5 	bl	80008cc <I2C_MasterSendData>
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	20000034 	.word	0x20000034

08000d30 <I2C_Initialization>:
void I2C_Initialization(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;
	I2CPins.pGPIOx = GPIOB;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <I2C_Initialization+0x40>)
 8000d38:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALT;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_AltFunMode = 4;
 8000d42:	2304      	movs	r3, #4
 8000d44:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000d46:	2302      	movs	r3, #2
 8000d48:	72bb      	strb	r3, [r7, #10]
	I2CPins.GPIO_PinConfig.GPIO_PinOpType = GPIO_OP_TYPE_OD;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	733b      	strb	r3, [r7, #12]
	//SCL
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = 6;
 8000d4e:	2306      	movs	r3, #6
 8000d50:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fa47 	bl	80001e8 <GPIO_Init>
	//SDA
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = 9;
 8000d5a:	2309      	movs	r3, #9
 8000d5c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fa41 	bl	80001e8 <GPIO_Init>

}
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40020400 	.word	0x40020400

08000d74 <main>:
int main(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioButton;
	memset(&GpioButton,0,sizeof(GpioButton));
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	220c      	movs	r2, #12
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f000 f891 	bl	8000ea8 <memset>
	GpioButton.pGPIOx = GPIOD;
 8000d86:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <main+0x84>)
 8000d88:	607b      	str	r3, [r7, #4]
	GpioButton.GPIO_PinConfig = UserButton;
 8000d8a:	4a1c      	ldr	r2, [pc, #112]	; (8000dfc <main+0x88>)
 8000d8c:	f107 0308 	add.w	r3, r7, #8
 8000d90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d94:	6018      	str	r0, [r3, #0]
 8000d96:	3304      	adds	r3, #4
 8000d98:	8019      	strh	r1, [r3, #0]
	GPIO_PeriClockControl(GpioButton.pGPIOx,ENABLE);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fbb8 	bl	8000514 <GPIO_PeriClockControl>
	GPIO_Init(&GpioButton);
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fa1e 	bl	80001e8 <GPIO_Init>
	GPIO_PriorityConfig(IRQ_NO_EXTI9_5,10);
 8000dac:	210a      	movs	r1, #10
 8000dae:	2017      	movs	r0, #23
 8000db0:	f7ff fc9e 	bl	80006f0 <GPIO_PriorityConfig>
	GPIO_InteruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 8000db4:	2101      	movs	r1, #1
 8000db6:	2017      	movs	r0, #23
 8000db8:	f7ff fcd0 	bl	800075c <GPIO_InteruptConfig>


	memset(&I2C_handle,0, sizeof(I2C_handle));
 8000dbc:	2224      	movs	r2, #36	; 0x24
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	480f      	ldr	r0, [pc, #60]	; (8000e00 <main+0x8c>)
 8000dc2:	f000 f871 	bl	8000ea8 <memset>
	I2C_handle.I2C_Config.I2C_SCLSpeed =(uint32_t)I2C_SCL_SPEED_SM;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <main+0x8c>)
 8000dc8:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <main+0x90>)
 8000dca:	605a      	str	r2, [r3, #4]
	I2C_handle.I2C_Config.I2C_DeviceAddress = 0x61;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <main+0x8c>)
 8000dce:	2261      	movs	r2, #97	; 0x61
 8000dd0:	721a      	strb	r2, [r3, #8]
	I2C_handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <main+0x8c>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	725a      	strb	r2, [r3, #9]
	I2C_handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <main+0x8c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	729a      	strb	r2, [r3, #10]
	I2C_handle.I2Cx = I2C1;
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <main+0x8c>)
 8000de0:	4a09      	ldr	r2, [pc, #36]	; (8000e08 <main+0x94>)
 8000de2:	601a      	str	r2, [r3, #0]
	I2C_Init(&I2C_handle);
 8000de4:	4806      	ldr	r0, [pc, #24]	; (8000e00 <main+0x8c>)
 8000de6:	f7ff fe59 	bl	8000a9c <I2C_Init>
	I2C_Initialization();
 8000dea:	f7ff ffa1 	bl	8000d30 <I2C_Initialization>
	I2C_PeripheralControl(I2C1,ENABLE);
 8000dee:	2101      	movs	r1, #1
 8000df0:	4805      	ldr	r0, [pc, #20]	; (8000e08 <main+0x94>)
 8000df2:	f7ff ff57 	bl	8000ca4 <I2C_PeripheralControl>
	//I2C_MasterSendData(&I2C_handle,buffer,sizeof(buffer),10);
	while(1)
 8000df6:	e7fe      	b.n	8000df6 <main+0x82>
 8000df8:	40020c00 	.word	0x40020c00
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	20000034 	.word	0x20000034
 8000e04:	000186a0 	.word	0x000186a0
 8000e08:	40005400 	.word	0x40005400

08000e0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e0c:	480d      	ldr	r0, [pc, #52]	; (8000e44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e0e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e10:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e14:	480c      	ldr	r0, [pc, #48]	; (8000e48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e16:	490d      	ldr	r1, [pc, #52]	; (8000e4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e18:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <LoopForever+0xe>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e1c:	e002      	b.n	8000e24 <LoopCopyDataInit>

08000e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e22:	3304      	adds	r3, #4

08000e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e28:	d3f9      	bcc.n	8000e1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e2c:	4c0a      	ldr	r4, [pc, #40]	; (8000e58 <LoopForever+0x16>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e30:	e001      	b.n	8000e36 <LoopFillZerobss>

08000e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e34:	3204      	adds	r2, #4

08000e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e38:	d3fb      	bcc.n	8000e32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e3a:	f000 f811 	bl	8000e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e3e:	f7ff ff99 	bl	8000d74 <main>

08000e42 <LoopForever>:

LoopForever:
    b LoopForever
 8000e42:	e7fe      	b.n	8000e42 <LoopForever>
  ldr   r0, =_estack
 8000e44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e4c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000e50:	08000ef4 	.word	0x08000ef4
  ldr r2, =_sbss
 8000e54:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000e58:	20000058 	.word	0x20000058

08000e5c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e5c:	e7fe      	b.n	8000e5c <ADC_IRQHandler>
	...

08000e60 <__libc_init_array>:
 8000e60:	b570      	push	{r4, r5, r6, lr}
 8000e62:	4d0d      	ldr	r5, [pc, #52]	; (8000e98 <__libc_init_array+0x38>)
 8000e64:	4c0d      	ldr	r4, [pc, #52]	; (8000e9c <__libc_init_array+0x3c>)
 8000e66:	1b64      	subs	r4, r4, r5
 8000e68:	10a4      	asrs	r4, r4, #2
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	42a6      	cmp	r6, r4
 8000e6e:	d109      	bne.n	8000e84 <__libc_init_array+0x24>
 8000e70:	4d0b      	ldr	r5, [pc, #44]	; (8000ea0 <__libc_init_array+0x40>)
 8000e72:	4c0c      	ldr	r4, [pc, #48]	; (8000ea4 <__libc_init_array+0x44>)
 8000e74:	f000 f820 	bl	8000eb8 <_init>
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	10a4      	asrs	r4, r4, #2
 8000e7c:	2600      	movs	r6, #0
 8000e7e:	42a6      	cmp	r6, r4
 8000e80:	d105      	bne.n	8000e8e <__libc_init_array+0x2e>
 8000e82:	bd70      	pop	{r4, r5, r6, pc}
 8000e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e88:	4798      	blx	r3
 8000e8a:	3601      	adds	r6, #1
 8000e8c:	e7ee      	b.n	8000e6c <__libc_init_array+0xc>
 8000e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e92:	4798      	blx	r3
 8000e94:	3601      	adds	r6, #1
 8000e96:	e7f2      	b.n	8000e7e <__libc_init_array+0x1e>
 8000e98:	08000eec 	.word	0x08000eec
 8000e9c:	08000eec 	.word	0x08000eec
 8000ea0:	08000eec 	.word	0x08000eec
 8000ea4:	08000ef0 	.word	0x08000ef0

08000ea8 <memset>:
 8000ea8:	4402      	add	r2, r0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d100      	bne.n	8000eb2 <memset+0xa>
 8000eb0:	4770      	bx	lr
 8000eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8000eb6:	e7f9      	b.n	8000eac <memset+0x4>

08000eb8 <_init>:
 8000eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eba:	bf00      	nop
 8000ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ebe:	bc08      	pop	{r3}
 8000ec0:	469e      	mov	lr, r3
 8000ec2:	4770      	bx	lr

08000ec4 <_fini>:
 8000ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec6:	bf00      	nop
 8000ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eca:	bc08      	pop	{r3}
 8000ecc:	469e      	mov	lr, r3
 8000ece:	4770      	bx	lr
